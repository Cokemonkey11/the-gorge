library Muscii requires Sound
	struct Note
		string path
		integer volume
		real pitch
		Note previous
		Note next
		
		public method copy takes nothing returns Note
			return Note.create(this.path,this.volume,this.pitch)
		endmethod
		
		public method play takes nothing returns nothing
			call Sound.play(this.path,this.pitch,this.volume)
		endmethod
		
		public static method create takes string path, integer volume, real pitch returns Note
			local Note n = Note.allocate()
			set n.path = path
			set n.volume = volume
			set n.pitch = pitch
			set n.previous = -1
			set n.next = -1
			return n
		endmethod
	endstruct
	
	struct Chord
		Note first
		Note last
		Chord previous
		Chord next
		
		public method copy takes nothing returns Chord
			local Note iterator = this.first
			local Chord new = Chord.create(iterator)
			loop
				set iterator = iterator.next
				exitwhen iterator == -1
				call new.addNote(iterator)
			endloop
			return new
		endmethod
		
		public method play takes nothing returns nothing
			local Note iterator = this.first
			loop
				exitwhen iterator == -1
				call iterator.play()
				set iterator = iterator.next
			endloop
		endmethod
		
		public method addNote takes Note n returns Chord
			local Note copy = n.copy()
			local Note temp = this.last
			set temp.next = copy
			set copy.previous = temp
			return this
		endmethod
		
		public static method create takes Note n returns Chord
			local Note q = Note.create(n.path,n.volume,n.pitch)
			local Chord c = Chord.allocate()
			set c.previous = -1
			set c.next = -1
			set c.first = q
			set c.last = q
			return c
		endmethod
	endstruct
	
	struct Muscii
		private static HandleTable fromClock
		private static Muscii array db
		private static integer dbIndex = -1
		Chord first
		Chord last
		Chord iterator
		real tempo //in whole notes per minute
		timer clock
		integer count
		integer queueCount
		string cbf
		Muscii queued
		
		public static method interrupt takes nothing returns nothing
			local integer index = 0
			local Muscii temp
			loop
				exitwhen index>dbIndex
				set temp = db[index]
				call PauseTimer(temp.clock)
				set index = index + 1
			endloop
		endmethod
		
		public method callback takes string func returns Muscii
			set this.cbf = func
			return this
		endmethod
		
		public method copy takes nothing returns Muscii
			local Chord iterator = this.first
			local Muscii new = Muscii.create(iterator,this.tempo)
			loop
				set iterator = iterator.next
				exitwhen iterator == -1
				call new.addChord(iterator.copy())
			endloop
			return new
		endmethod
		
		public method play takes nothing returns Muscii
			call playCounted(-1)
			return this // for chaining
		endmethod
		
		public method playCounted takes integer count returns Muscii
			set this.count = count
			call TimerStart(this.clock,1. / (this.tempo / 60.),true,function thistype.p)
			return this
		endmethod
		
		public method enqueue takes Muscii next, integer queueCount returns Muscii
			// if the target Muscii is already queuing something, it is in use - we
			// therefore copy it.
			if next.queued == -1 then
				set this.queued = next
			else
				set this.queued = next.copy()
			endif
			set this.queueCount = queueCount
			return this.queued
		endmethod
		
		public method stop takes nothing returns Muscii
			call PauseTimer(this.clock)
			set this.iterator = this.first
			return this 
		endmethod
		
		public method addChord takes Chord c returns Muscii
			local Chord q = this.last
			local Chord copy = c.copy()
			set q.next = copy
			set this.last = copy
			set copy.previous = q
			return this
		endmethod
		
		public static method create takes Chord c, real tempo returns Muscii
			local Muscii m = Muscii.allocate()
			local Chord cop = c.copy()
			set m.first = cop
			set m.last = cop
			set m.iterator = cop
			set m.tempo = tempo
			set m.clock = CreateTimer()
			set m.queued = -1
			set m.cbf = ""
			set fromClock[m.clock] = m
			set dbIndex = dbIndex + 1
			set db[dbIndex] = m
			return m
		endmethod
		
		private static method p takes nothing returns nothing
			local Muscii m = fromClock[GetExpiredTimer()]
			local Muscii next
			local Chord now = m.iterator
			call now.play()
			if now.next != -1 then
				set m.iterator = now.next
			else
				set m.iterator = m.first
				if m.count>-1 then
					set m.count=m.count-1
					if m.count==-1 then
						call m.stop()
						set next = m.queued
						if next != -1 then
							call next.playCounted(m.queueCount)
						endif
						set m.queued = -1
						if m.cbf != "" then
							call ExecuteFunc(m.cbf)
							set m.cbf = ""
						endif
					endif
				endif
			endif
		endmethod
		
		private static method onInit takes nothing returns nothing
			set fromClock=HandleTable.create()
		endmethod
	endstruct
endlibrary

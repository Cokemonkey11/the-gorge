package Profile
import ErrorHandling
// import Reflection
import StringUtils
import WurstLinkedHashMap
import WurstRealHeapGuard

@configurable public constant profiling_enabled = true

public class Profile
    // source, crewmember inst, damage
    protected static constant map = new LinkedHashMap<string, int>()

    construct()
        error("Not constructible")

    protected static function incr(string stack)
        if not map.has(stack)
            map.put(stack, 0)

        map.put(stack, map.get(stack) + 1)

    static function display(player forWhom)
        if not profiling_enabled
            error("Profiling disabled")

        new RealHeapGuard<string>() guard ->
            Profile.map.forEach() kv ->
                let splits = kv.key.split("\n")
                guard.push(
                    kv.value.toReal(),
                    (
                        splits.get(1).trim().trim("when calling ")
                            + "."
                            + splits.get(2).trim().trim("when calling ")
                            + " :: "
                            + kv.value.toString()
                    ).trim("profile in ")
                )
                destroy splits

            forWhom.print("|cffffcc00Map profile:|r")
            for _i = 0 to 4
                let disp = guard.pop()
                forWhom.print(disp)
            destroy guard


public function profile()
    if profiling_enabled
        Profile.incr(
            getStackTraceString()
        )
        Profile.incr("<profiler>")


/** Reflection API */

native maxTypeId() returns int
native typeIdToTypeName(int _v) returns string
native instanceCount(int _v) returns int
native maxInstanceCount(int _v) returns int

public function reflection_summary(player forWhom)
    new RealHeapGuard<string>() guard ->
        for type_id_iter = 1 to maxTypeId() - 1
            guard.push(
                maxInstanceCount(type_id_iter).toReal(),
                (
                    typeIdToTypeName(type_id_iter) +
                    ": " +
                    instanceCount(type_id_iter).toString() +
                    "/" +
                    maxInstanceCount(type_id_iter).toString()
                )
            )

        forWhom.print("|cffffcc00Allocation metrics:|r")
        for _i = 0 to 9
            let disp = guard.pop()
            forWhom.print(disp)
        destroy guard

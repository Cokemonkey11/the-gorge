library DummyUnitStack
    struct DummyUnitStack
        private static constant integer DUMMY_UNIT_ID='u000'
        private static constant integer MIN_PRELOAD_BLOCK_SIZE=10 //How many units to preload when the preloading algorithm turns on, at a minimum?

        private static constant integer PRELOAD_INIT_COUNT=200 //How many units to preload during initialization
        private static constant boolean DO_PIC=true

        private static constant integer DYNAMIC_DEFERRED_PRELOAD_COUNT=20 //How many units should DummyUnitStack keep preloaded at a minimum?
        private static constant boolean DO_DDPC=true

        private static constant integer INITIAL_DEFERRED_PRELOAD_COUNT=20 //How many units should be queued on the preloader on map start?
        private static constant boolean DO_IDPC=true

        private static constant integer MAX_PRELOADED_UNITS=5000
        private static constant boolean DO_MPU=true

        private static constant real SAFE_LOC_X=-3820.
        private static constant real SAFE_LOC_Y=3700.
        private static constant real CLOCK_PERIOD=1./60.
        private static unit array dummyStack
        private static integer stackIndex=-1
        private static integer deferredTodoCount=0
        private static timer clock=CreateTimer()

        private static method add takes boolean preloading returns unit
            unit u=CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE),thistype.DUMMY_UNIT_ID,thistype.SAFE_LOC_X,thistype.SAFE_LOC_Y,0.)
            UnitAddAbility(u,'Aloc')
            UnitAddAbility(u,'Arav')
            if preloading then
                thistype.stackIndex=thistype.stackIndex+1
                thistype.dummyStack[thistype.stackIndex]=u
            else
                return u
            endif
            return null
        endmethod

        private static method deferredPreloader takes nothing returns nothing
            thistype.deferredTodoCount=thistype.deferredTodoCount-1
            thistype.add(true)
            if thistype.deferredTodoCount<1 then
                PauseTimer(thistype.clock)
            endif
        endmethod

        public static method get takes nothing returns unit
            unit result
            if thistype.stackIndex!=-1 then
                thistype.stackIndex=thistype.stackIndex-1
                result=thistype.dummyStack[thistype.stackIndex+1]
            else
                result=thistype.add(false)
            endif
            static if DO_DDPC then
                if thistype.stackIndex<(thistype.DYNAMIC_DEFERRED_PRELOAD_COUNT-1) and thistype.deferredTodoCount<1 then
                    thistype.deferredTodoCount=thistype.MIN_PRELOAD_BLOCK_SIZE
                    TimerStart(thistype.clock,thistype.CLOCK_PERIOD,true,function thistype.deferredPreloader)
                endif
            endif
            return result
        endmethod

        public static method release takes unit u returns nothing
            static if DO_MPU then
                if thistype.stackIndex>=thistype.MAX_PRELOADED_UNITS then
                    RemoveUnit(u)
                    return
                endif
            endif
            SetUnitFlyHeight(u,0.,0.)
            SetUnitScale(u,1.,1.,1.)
            SetUnitOwner(u,Player(PLAYER_NEUTRAL_PASSIVE),true)
            SetUnitX(u,thistype.SAFE_LOC_X)
            SetUnitY(u,thistype.SAFE_LOC_Y)
            thistype.stackIndex=thistype.stackIndex+1
            thistype.dummyStack[thistype.stackIndex]=u
        endmethod

        private static method onInit takes nothing returns nothing
            integer index=1
            static if DO_PIC then
                loop
                    exitwhen index>thistype.PRELOAD_INIT_COUNT
                    thistype.add(true)
                    index=index+1
                endloop
            endif
            static if DO_IDPC then
                thistype.deferredTodoCount=thistype.INITIAL_DEFERRED_PRELOAD_COUNT
                TimerStart(thistype.clock,thistype.CLOCK_PERIOD,true,function thistype.deferredPreloader)
            endif
        endmethod
    endstruct
endlibrary

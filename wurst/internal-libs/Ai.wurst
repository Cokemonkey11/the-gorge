package Ai

import ClosureEvents
import ClosureTimers
import ErrorHandling
import HashMap
import WurstLinkedHashMap
import LinkedList
import Players
import Profile
import Ships
import TerrainData
import UnitsApi

bool array ai_controlled

constant UPDATE_PERIOD = 1.5

class Vec2
    vec2 v
    construct(vec2 which)
        this.v = which

constant aiMap = new HashMap<string, Vec2>()
constant propensityMap = new HashMap<unit, Propensity>()

public enum Propensity
    None
    North
    South

function Propensity.toString() returns string
    switch this
        case North
            return "North"
        case South
            return "South"
        default
            error("Bad propensity to make into string")
            return ""

public enum Status
    None
    Spawn
    OwnTower
    Obelisk
    EnemyTower
    EnemyKeep

function Status.next() returns Status
    switch this
        case Spawn
            return Status.OwnTower
        case OwnTower
            return Status.Obelisk
        case Obelisk
            return Status.EnemyTower
        case EnemyTower
            return Status.EnemyKeep
        case EnemyKeep
            return Status.EnemyKeep
        default
            error("Unexpected Status")
            return Status.None

function Status.toString() returns string
    switch this
        case Spawn
            return "Spawn"
        case OwnTower
            return "OwnTower"
        case Obelisk
            return "Obelisk"
        case EnemyTower
            return "EnemyTower"
        case EnemyKeep
            return "EnemyKeep"
        default
            error("Base Status to display")
            return ""

function Status.toVec2(Propensity p, player alliance) returns vec2
    let key = this.toString() + p.toString() + alliance.getName()
    if aiMap.has(key)
        return aiMap.get(key).v

    switch alliance.getId()
        case 0  // West team
            switch p
                case North
                    switch this
                        case Spawn
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_WEST))
                            return this.toVec2(p, alliance)
                        case OwnTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_WEST_NORTH))
                            return this.toVec2(p, alliance)
                        case Obelisk
                            aiMap.put(key, new Vec2(TerrainData.POS_STONE1))
                            return this.toVec2(p, alliance)
                        case EnemyTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_EAST_NORTH))
                            return this.toVec2(p, alliance)
                        case EnemyKeep
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_EAST))
                            return this.toVec2(p, alliance)
                        default
                            error("Tried to get the target for an improper status.")
                case South
                    switch this
                        case Spawn
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_WEST))
                            return this.toVec2(p, alliance)
                        case OwnTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_WEST_SOUTH))
                            return this.toVec2(p, alliance)
                        case Obelisk
                            aiMap.put(key, new Vec2(TerrainData.POS_STONE2))
                            return this.toVec2(p, alliance)
                        case EnemyTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_EAST_SOUTH))
                            return this.toVec2(p, alliance)
                        case EnemyKeep
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_EAST))
                            return this.toVec2(p, alliance)
                        default
                            error("Tried to get the target for an improper status.")
                default
                    error("Tried to get the target without a propensity.")
        case 1  // East team
            switch p
                case North
                    switch this
                        case Spawn
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_EAST))
                            return this.toVec2(p, alliance)
                        case OwnTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_EAST_NORTH))
                            return this.toVec2(p, alliance)
                        case Obelisk
                            aiMap.put(key, new Vec2(TerrainData.POS_STONE1))
                            return this.toVec2(p, alliance)
                        case EnemyTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_WEST_NORTH))
                            return this.toVec2(p, alliance)
                        case EnemyKeep
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_WEST))
                            return this.toVec2(p, alliance)
                        default
                            error("Tried to get the target for an improper status.")
                case South
                    switch this
                        case Spawn
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_EAST))
                            return this.toVec2(p, alliance)
                        case OwnTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_EAST_SOUTH))
                            return this.toVec2(p, alliance)
                        case Obelisk
                            aiMap.put(key, new Vec2(TerrainData.POS_STONE2))
                            return this.toVec2(p, alliance)
                        case EnemyTower
                            aiMap.put(key, new Vec2(TerrainData.POS_TOWER_WEST_SOUTH))
                            return this.toVec2(p, alliance)
                        case EnemyKeep
                            aiMap.put(key, new Vec2(TerrainData.POS_KEEP_WEST))
                            return this.toVec2(p, alliance)
                        default
                            error("Tried to get the target for an improper status.")
                default
                    error("Tried to get the target without a propensity.")
        default
            error("Tried to get the target for a non-team player.")
    return vec2(0., 0.)

public function unit.intoCreepAi(Propensity p)
    propensityMap.put(this, p)
    // new CreepAi(this, p)

function vec2.growToRect(real rad) returns rect
    return Rect(this.x - rad, this.y - rad, this.x + rad, this.y + rad)

interface EnterListener
    function do()

function registerRect(EnterListener listener)
    listener.do()

let listeners = new LinkedHashMap<trigger, EnterListener>()
init
    let statuses = asList(Status.Spawn, Status.OwnTower, Status.Obelisk, Status.EnemyTower, Status.EnemyKeep)
    let propensities = asList(Propensity.North, Propensity.South)
    let alliances = asList(players[0], players[1])

    for alliance in alliances
        for propensity in propensities
            for status in statuses
                let vec = status.toVec2(propensity, alliance)
                listeners.put(
                    CreateTrigger()
                    ..registerRectEnterEventSource(vec.growToRect(250.))
                ) ->
                    let u = GetEnteringUnit()
                    if u.getOwner() == alliance
                        doAfter(status == Status.Spawn ? 0.25 : 0.) ->
                            profile()

                            if propensityMap.has(u) and propensityMap.get(u) == propensity
                                u.issuePointOrder(
                                    "attack",
                                    status.next().toVec2(propensity, alliance)
                                )

    listeners.forEach() (LHMEntry<trigger, EnterListener> kv) ->
        kv.key.addAction() ->
            listeners.get(GetTriggeringTrigger()).do()

function lockShip(unit u)
    u..setPos(u.getOwner().getStartLocation())
        ..setInvulnerable(true)
        ..pause()

public function unit.aiOnRevive()
    if ai_controlled[this.getOwner().getId()]
        lockShip(this)

public function player.intoAi()
    ai_controlled[this.getId()] = true

    // Just lock the ship at the start location.
    let u = Ships.ships[this.getId()]
    if not u == null and u.isAlive()
        lockShip(u)

public function player.intoAiX()
    ai_controlled[this.getId()] = true

    if Ships.ships[this.getId()] == null
        Ships.ships[this.getId()] = createUnit(
            this,
            ID_HELICOPTER,
            Players.isWest(this.getId())
            ? TerrainData.POS_KEEP_WEST
            : TerrainData.POS_KEEP_EAST,
            angle(0.)
        )

    doPeriodically(1.) cb ->
        if Ships.ships[this.getId()].isAlive()
            Ships.ships[this.getId()].issuePointOrder("move", vec2(0., 0.))

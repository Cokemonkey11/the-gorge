package Muscii
	import HashMap
	import LinkedList
	import Lodash
	import WurstProfile
	import SoundUtils

	var wants_mask = [
		true, true, true, true, true, true, true, true, true, true, true, true,
		true, true, true, true, true, true, true, true, true, true, true, true
	]
	public function player.wantsMusic() returns boolean
		return wants_mask[this.getId()]

	public function player.setWantsMusic(boolean flag)
		wants_mask[this.getId()] = flag

	public class Note
		int volume
		real pitch
		Note previous
		Note next
		SoundDefinition soundDefinition

		function copy() returns Note
			return new Note(this.soundDefinition.file, this.volume, this.pitch)


		function play()
			this.soundDefinition.play(10000, localPlayer.wantsMusic() ? this.volume : 0)

		construct(string path, int volume, real pitch)
			this.volume = volume
			this.pitch = pitch
			this.previous = null
			this.next = null
			this.soundDefinition = new SoundDefinition(path, false)


	public class Chord
		Note first
		Note last
		Chord previous
		Chord next

		function copy() returns Chord
			Note iterator = this.first
			let nw = Chord.create(iterator)
			while iterator.next != null
				iterator = iterator.next
				nw.addNote(iterator)

			return nw


		function play()
			Note iterator = this.first
			while iterator != null
				iterator.play()
				iterator = iterator.next



		function addNote(Note n) returns Chord
			Note copy = n.copy()
			Note temp = this.last
			temp.next = copy
			copy.previous = temp
			return this


		static function create(Note n) returns Chord
			let q = new Note(n.soundDefinition.file, n.volume, n.pitch)
			let c = new Chord
			c.previous = null
			c.next = null
			c.first = q
			c.last = q
			return c



	public interface Section
		function do()

	public function LinkedList<string>.accumulate<Q>(Q startValue, FoldClosure<string, Q> predicate) returns Q
		var result = startValue
		for i from this.iterator()
			result = predicate.run(i, result)

		destroy predicate
		return result

	public function LinkedList<Track>.accumulate<Q>(Q startValue, FoldClosure<Track, Q> predicate) returns Q
		var result = startValue
		for i from this.iterator()
			result = predicate.run(i, result)

		destroy predicate
		return result

	public class Track
		Note n
		string seq

		construct(Note n, string seq)
			this.n = n
			this.seq = seq

	let chord_registry = new HashMap<string, Chord>()
		..put("", Chord.create(new Note(Sounds.battleNetTick, 0, 1.)))

	function LinkedList<Track>.toChord() returns Chord
		let key = this.map(track -> track.n.soundDefinition.file).accumulate("", (i, q) -> i + q)

		if not chord_registry.has(key)
			let chord = this.accumulate(0 castTo Chord, (track, chord) -> chord == null ? Chord.create(track.n) : chord..addNote(track.n))

			chord_registry.put(key, chord)

		return chord_registry.get(key)



	public class Muscii
		static Table fromClock
		private static Muscii array db
		private static int dbIndex = -1
		Chord first
		Chord last
		Chord iterator
		real tempo //in whole notes per minute
		timer clock
		int count
		int queueCount
		Section cbf
		Muscii queued

		static function interrupt()
			int index = 0
			Muscii temp
			while index <= dbIndex
				temp = db[index]
				PauseTimer(temp.clock)
				index = index + 1



		function callback(Section callback) returns Muscii
			this.cbf = callback
			return this


		function copy() returns Muscii
			Chord iterator = this.first
			let nw = Muscii.create(iterator, this.tempo)
			while iterator.next != null
				iterator = iterator.next
				nw.addChord(iterator.copy())

			return nw


		function play() returns Muscii
			playCounted(-1)
			return this // for chaining


		function playCounted(int count) returns Muscii
			this.count = count
			TimerStart(this.clock, 1. / (this.tempo / 60.), true, function Muscii.p)
			return this


		function enqueue(Muscii next, int queueCount) returns Muscii
			// if the target Muscii is already queuing something, it is in use - we
			// therefore copy it.
			if next.queued == null
				this.queued = next
			else
				this.queued = next.copy()

			this.queueCount = queueCount
			return this.queued


		function stop() returns Muscii
			PauseTimer(this.clock)
			this.iterator = this.first
			return this


		function addChord(Chord c) returns Muscii
			Chord q = this.last
			Chord copy = c.copy()
			q.next = copy
			this.last = copy
			copy.previous = q
			return this

		function setTempo(real tempo)
			this.tempo = tempo


		static function create(Chord c, real tempo) returns Muscii
			let m = new Muscii
			let cop = c.copy()
			m.first = cop
			m.last = cop
			m.iterator = cop
			m.tempo = tempo
			m.clock = CreateTimer()
			m.queued = null
			m.cbf    = null
			fromClock.saveInt(m.clock.getHandleId(), m castTo int)
			dbIndex = dbIndex + 1
			db[dbIndex] = m
			return m

		static function fromTracks(vararg Track tracks) returns Muscii
			let trax = ownList(new LinkedList<Track>())

			for track in tracks
				trax.push(track)

			let base_chord = trax.filter(track -> track.seq.substring(0, 1) != "-").toChord()

			let m = Muscii.create(base_chord, 240.)

			for i = 1 to (trax.getFirst().seq.length() - 1)
				let chord = trax.filter(track -> track.seq.substring(i, i + 1) != "-").toChord()

				m.addChord(chord)

			return m

		private static function p()
			profile()

			Muscii m = fromClock.loadInt(GetExpiredTimer().getHandleId()) castTo Muscii
			Muscii next
			let now = m.iterator
			Section cbf
			now.play()
			if now.next != null
				m.iterator = now.next
			else
				m.iterator = m.first
				if m.count > -1
					m.count = m.count-1
					if m.count == -1
						m.stop()
						next = m.queued
						if next != null
							next.playCounted(m.queueCount)

						m.queued = null
						if m.cbf != null
							m.cbf.do()
							cbf = m.cbf
							destroy cbf
							m.cbf = null


	init
		Muscii.fromClock = new Table

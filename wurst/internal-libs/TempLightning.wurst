package TempLightning

import LinkedListModule
import WurstProfile

public class TempLightning
    use LinkedListModule

    static constant clock = CreateTimer()

    vec3 start_v
    vec3 end_v
    real initial_duration
    real duration_left
    lightning bolt
    string style

    static function ring(vec3 ctr, real rad, real dur, string st, int seg)
        let segments = max(3, seg)

        for i = 0 to segments
            new TempLightning(
                ctr.offset2d(angle(2. * PI * i / segments), rad),
                ctr.offset2d(angle(2. * PI * (i + 1) / segments), rad), dur, st)

    static function ring(vec3 center, real radius, real duration, string style)
        ring(center, radius, duration, style, (2. * radius * PI / 100.).toInt())

    ondestroy
        this.bolt.destr()

    construct(vec3 st, vec3 ed, real duration, string style)
        this.start_v = st
        this.end_v = ed
        this.initial_duration = duration
        this.duration_left = duration
        this.style = style
        this.bolt = addLightning(style, true, st, ed)

        if size == 1
            clock.startPeriodic(ANIMATION_PERIOD) ->
                profile(size)
                for templ from staticItr()
                    let a = (
                        templ.duration_left / templ.initial_duration * 255
                    ).toInt()
                    templ.bolt.setColor(colorA(255, 255, 255, a))

                    templ.duration_left -= ANIMATION_PERIOD

                    if templ.duration_left <= 0.
                        destroy templ

                if size == 0
                    clock.pause()

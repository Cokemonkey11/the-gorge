// Creating a crew member: Create necessary phoenix fire abilities, create
// necessary crew member unit, create necessary cargo unit, add crew member
// unit to keep slot, link member + cargo in this script.
package Crewmembers
	import Ships
	import Game
	import SimError
	import RegisterPlayerUnitEvent
	import TerrainData
	import Players

	native UnitAlive takes unit u returns bool

	constant MAX_SLOTS = 10

	class CrewMember
		int ownerID
		unit dummy
		unit phoenix
	end

	class CrewInventory
		CrewMember array slots[MAX_SLOTS]
	end

	public class Crewmembers
		static constant HEADHUNTER_ID    = 'o000'
		static constant HEADHUNTER_D_ID  = 'o009'

		static constant WITCHDOCTOR_ID   = 'o001'
		static constant WITCHDOCTOR_D_ID = 'o00F'

		static constant SPEARMAN_ID      = 'o002'
		static constant SPEARMAN_D_ID    = 'o00D'

		static constant UNBROKEN_ID      = 'o003'
		static constant UNBROKEN_D_ID    = 'o00E'

		static constant SHAMAN_ID        = 'o004'
		static constant SHAMAN_D_ID      = 'o00C'

		static constant SEAWITCH_ID      = 'o005'
		static constant SEAWITCH_D_ID    = 'o00B'

		static constant GRENADIER_ID     = 'o006'
		static constant GRENADIER_D_ID   = 'o008'

		static constant LASERRIFLE_ID    = 'o007'
		static constant LASERRIFLE_D_ID  = 'o00A'

		static constant GRYPHON_ID       = 'o00G'
		static constant GRYPHON_D_ID     = 'o00H'

		static constant AMASTER_ID       = 'o00I'
		static constant AMASTER_D_ID     = 'o00J'

		static constant ODRAKE_ID        = 'o00K'
		static constant ODRAKE_D_ID      = 'o00L'

		static constant VTEMPT_ID        = 'o00M'
		static constant VTEMPT_D_ID      = 'o00N'

		private static constant ERROR_MESSAGE = "You cannot purchase crewmen from your opponent."
		private static constant CLOCK_PERIOD = 1./30.
		private static constant OFFSET = 256.+64.
		private static constant SELL_RATE = .5

		private static CrewMember array db
		private static int dbIndex= -1
		private static timer time= CreateTimer()
		static Table fromDummy
		static Table links
		static CrewInventory array inventories
		static int array slotIndices

		static function getMemberIndex takes int id, CrewMember cre returns int
			int index= 0
			loop
				exitwhen index > slotIndices[id]
				if inventories[id].slots[index] == cre then
					return index
				end
				index= index+1
			end
			return -1
		end

		static function updatePosition takes CrewMember cre, int index returns nothing
			real face = I2R(index) * 2. * bj_PI / I2R(MAX_SLOTS)
			real x = GetStartLocationX(cre.ownerID) + OFFSET*Cos(face)
			real y = GetStartLocationY(cre.ownerID) + OFFSET*Sin(face)
			SetUnitPosition(cre.dummy, x, y)
			SetUnitFacing(cre.dummy, face*bj_RADTODEG)
		end

		static function release takes unit u returns nothing
			CrewMember temp
			int val
			int index
			if fromDummy.hasInt(u.getHandleId()) then
				temp = fromDummy.loadInt(u.getHandleId()) castTo CrewMember
				val = R2I(GetWidgetLife(temp.phoenix)*SELL_RATE)
				SetPlayerState(Players.players[temp.ownerID], PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Players.players[temp.ownerID], PLAYER_STATE_RESOURCE_GOLD)+val)
				DisplayTextToPlayer(Players.players[temp.ownerID], 0., 0., "You pawned your |cffffcc00"+GetUnitName(u)+"|r for |cffffcc00"+I2S(val)+"|r gold.")
				index = getMemberIndex(temp.ownerID, temp)
				if index!= -1 then
					inventories[temp.ownerID].slots[index] = inventories[temp.ownerID].slots[slotIndices[temp.ownerID]]
					slotIndices[temp.ownerID] = slotIndices[temp.ownerID] - 1
					if slotIndices[temp.ownerID] != -1 then
						updatePosition(inventories[temp.ownerID].slots[index], index)
					end
					RemoveUnit(temp.dummy)
					RemoveUnit(temp.phoenix)
					destroy temp
				else
					debug BJDebugMsg("Error: tried to release a unit that had no index :(")
				end
			else
				debug BJDebugMsg("Error: Tried to release a unit that wasn't logged :(")
			end
		end

		static function p takes nothing returns nothing
			CrewMember temp
			int index= 0
			loop
				exitwhen index>dbIndex
				temp= db[index]
				if UnitAlive(Ships.ships[temp.ownerID]) and not Game.ended then
					SetUnitX(temp.phoenix, GetUnitX(Ships.ships[temp.ownerID]))
					SetUnitY(temp.phoenix, GetUnitY(Ships.ships[temp.ownerID]))
				else
					SetUnitX(temp.phoenix, TerrainData.SAFE_X)
					SetUnitY(temp.phoenix, TerrainData.SAFE_Y)
				end
				index= index+1
			end
		end

		static function c takes nothing returns nothing
			CrewMember temp
			unit selU = GetSellingUnit()
			unit bU= GetBuyingUnit()
			unit sU= GetSoldUnit()
			real x
			real y
			real face
			player buyer = GetOwningPlayer(sU)
			if Ships.getClass(sU)== Ships.CLASS_UNKNOWN then
				if IsUnitAlly(bU, GetOwningPlayer(selU)) then
					temp = new CrewMember
					temp.ownerID= GetPlayerId(buyer)
					slotIndices[temp.ownerID] = slotIndices[temp.ownerID] + 1
					inventories[temp.ownerID].slots[slotIndices[temp.ownerID]] = temp
					face = I2R(slotIndices[temp.ownerID]) * 2. * bj_PI / I2R(MAX_SLOTS)
					x = GetStartLocationX(temp.ownerID) + OFFSET*Cos(face)
					y = GetStartLocationY(temp.ownerID) + OFFSET*Sin(face)
					temp.dummy = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), links.loadInt(sU.getTypeId()), x, y, face*bj_RADTODEG)
					temp.phoenix = sU
					dbIndex = dbIndex + 1
					db[dbIndex] = temp
					fromDummy.saveInt(temp.dummy.getHandleId(), temp castTo int)
					if dbIndex == 0 then
						TimerStart(time, CLOCK_PERIOD, true, function p)
					end
				else
					simError(GetOwningPlayer(bU), ERROR_MESSAGE)
					SetPlayerState(buyer, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(buyer, PLAYER_STATE_RESOURCE_GOLD)+R2I(GetWidgetLife(sU)))
					RemoveUnit(sU)
				end
			end
		end
	end

	init
		int index = 0
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL, function Crewmembers.c)

		// Format Links
		Crewmembers.links = new Table
		Crewmembers.links.saveInt(Crewmembers.HEADHUNTER_ID, Crewmembers.HEADHUNTER_D_ID)
		Crewmembers.links.saveInt(Crewmembers.WITCHDOCTOR_ID, Crewmembers.WITCHDOCTOR_D_ID)
		Crewmembers.links.saveInt(Crewmembers.SPEARMAN_ID, Crewmembers.SPEARMAN_D_ID)
		Crewmembers.links.saveInt(Crewmembers.UNBROKEN_ID, Crewmembers.UNBROKEN_D_ID)
		Crewmembers.links.saveInt(Crewmembers.SHAMAN_ID, Crewmembers.SHAMAN_D_ID)
		Crewmembers.links.saveInt(Crewmembers.SEAWITCH_ID, Crewmembers.SEAWITCH_D_ID)
		Crewmembers.links.saveInt(Crewmembers.GRENADIER_ID, Crewmembers.GRENADIER_D_ID)
		Crewmembers.links.saveInt(Crewmembers.LASERRIFLE_ID, Crewmembers.LASERRIFLE_D_ID)
		Crewmembers.links.saveInt(Crewmembers.GRYPHON_ID, Crewmembers.GRYPHON_D_ID)
		Crewmembers.links.saveInt(Crewmembers.AMASTER_ID, Crewmembers.AMASTER_D_ID)
		Crewmembers.links.saveInt(Crewmembers.ODRAKE_ID, Crewmembers.ODRAKE_D_ID)
		Crewmembers.links.saveInt(Crewmembers.VTEMPT_ID, Crewmembers.VTEMPT_D_ID)

		Crewmembers.fromDummy = new Table

		// Initialize slotInidices
		loop
			exitwhen index>11
			Crewmembers.slotIndices[index] = -1
			index= index+1
		end

		// Initialize CrewInventories
		index = 0
		loop
			exitwhen index > 11

			Crewmembers.inventories[index] = new CrewInventory()

			index++
		end
	end

package Game
	import Ai
	import Assets
	import ClosureTimers
	import Damage
	import Ships
	import MyBoard
	import RegisterEvents
	import Muscii
	import TerrainData
	import FloatText
	import Players
	import SinglePlayer
	import SoundsLib
	import UnitsApi

	public class Game
		static constant HELICOPTER_ICON     = "ReplaceableTextures\\CommandButtons\\BTNFlyingMachine.blp"
		static constant PARACOPTER_ICON     = "ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp"
		static constant   ZEPPELIN_ICON     = "ReplaceableTextures\\CommandButtons\\BTNGoblinZeppelin.blp"
		static constant   SKYBARGE_ICON     = "ReplaceableTextures\\CommandButtons\\BTNUndeadAirBarge.blp"
		static constant TRADE_SUCCESS_SOUND = "Sound\\Interface\\QuestLog.wav"

		static constant       SHIELD_ID     = 'h003'
		static constant       REPAIR_ID     = 'h004'
		static constant        STONE_ID     = 'h002'
		static constant        DUMMY_ID     = 'u000'
		static constant STONE_SPIDER_ID     = 'n000'

		static constant START_GOLD          =   200
		static constant SHIELD_COUNT        =    10
		static constant    SHIELDOFFS          =   200.
		static constant    FADEOUT_DURATION    =    10.
		static constant    START_TIME          =     3.
		static constant    SHIP_OFFSET         =   328.
		static constant    LATER_OFFSET        =   128.
		static constant    STONE_SPIDER_FACING =   204.

		static constant MAP_DESCRIP           = "|cffffcc00The Gorge|r is a MOBA/AoS style game with elements from the classic Sked map " + /*
			*/ "|cffffcc00Battleships|r. The objective of the game is to use teamwork to push the neutral waves to the opposing base and destroy it."
		static constant DESCRIPTION_ICON      = "ReplaceableTextures\\CommandButtons\\BTNBansheeAdept.blp"
		static constant DESCRIPTION_TITLE     = "Description"

		static constant WEAPONS_DESCRIP       = "Your ship gains the ability to attack nearby enemies by the |cffffcc00Crew members|r purchased in " + /*
			*/ "your base. Each crew member has unique stats and will attack automatically when in range of an enemy."
		static constant WEAPONS_ICON          = "ReplaceableTextures\\CommandButtons\\BTNBookOfTheDead.blp"
		static constant WEAPONS_TITLE         = "Weapons"

		static constant EQUIP_DESCRIP         = "Equipment are items which can be carried by your ship. Equipment are separated into classes: " + /*
			*/ "|cffffcc00Engine|r, |cffffcc00Mechanic|r, |cffffcc00Hull|r, |cffffcc00Teleporter|r, |cffffcc00Shield Generator|r, |cffffcc00Contract|r, " + /*
			*/ "and |cffffcc00Special|r. A ship can only carry one item of each class, except for |cffffcc00Special|r and |cffffcc00Contract|r. " + /*
			*/ "Additionally, some |cffffcc00Ship Classes|r cannot use certain item classes."
		static constant EQUIP_ICON            = "ReplaceableTextures\\CommandButtons\\BTNSorceressMaster.blp"
		static constant EQUIP_TITLE           = "Equipment"

		static constant CLASS_DESCRIP         = "During a round of warfare in |cffffcc00The Gorge|r, you will encounter the different classes of " + /*
			*/ "Ship: |cffffcc00Frigates|r are well rounded ships designed to do well in most scenarios; |cffffcc00Battleships|r are heavy ships designed " + /*
			*/ "for warfare with large space for crew and good ability to tank damage; |cffffcc00Interceptors|r are fast moving ships which excel in " + /*
			*/ "chasing enemies and stopping smugglers; |cffffcc00Smugglers|r are small, light ships with abilities that aid in completing trade routes " + /*
			*/ "for earning money."
		static constant CLASS_ICON            = "ReplaceableTextures\\CommandButtons\\BTNGreaterRejuvScroll.blp"
		static constant CLASS_TITLE           = "Ship Classes"

		static constant DESCRIPTION_COMMANDS = "|cffffcc00-music|r - enable/disable music"
		static constant ICON_COMMANDS        = Icons.bTNGnollCommandAura
		static constant TITLE_COMMANDS       = "Chat Commands"

		static constant INFO_DESCRIP          = "|cffffcc00The Gorge|r is an independently developed mini-game by |cffffcc00Cokemonkey11|r. For " + /*
			*/ "map updates, or to say hello, find me on |cffffcc00hiveworkshop.com|r."
		static constant INFO_ICON             = "ReplaceableTextures\\CommandButtons\\BTNNecromancerMaster.blp"
		static constant INFO_TITLE            = "Information"

		static constant CREDS_DESCRIP         = "I'd like to thank |cffffcc00Sked|r, who developed the original Battleships map independantly and " + /*
			*/ "envisioned a game with automatically attacking weapons (Phoenix Fire). " + /*
			*/ "|cffffcc00peq and Frotty|r for extensive work on the wurst language and tooling." + /*
			*/ "|cffffcc00Vexorian, MindWorX, and Pitzermike|r (among others) who " + /*
			*/ "developed many classic snippets and tools like JassHelper, JNGP, Table, SimError, and more. |cffffcc00looking_for_help|r for discovering a " + /*
			*/ "new method in 2013 for recognizing spells and physical damage independantly in damage detectors. |cffffcc00kr0mat1k|r for the artwork used " + /*
			*/ "in the map preview. |cffffcc00Cage the Elephant|r for writing the song played in the background. |cffffcc00Zwiebelchen|r for writing " + /*
			*/ "TabReader, which inspired me to build Muscii. |cffffcc00bowser499|r for creading myBoard, a multiboard framework. |cffffcc00Kino|r for " + /*
			*/ "doing extensive Terrain work for The Gorge."
		static constant CREDS_ICON            = "ReplaceableTextures\\CommandButtons\\BTNLesserRejuvScroll.blp"
		static constant CREDS_TITLE           = "Credits"

		static constant WELCOME_MESSAGE       = "Welcome, Captain, to |cffffcc00The Gorge|r. If it is your first time playing, please see the |cffffcc00Information|r Menu."
		static constant START_SOUND           = "Sound\\Interface\\ArrangedTeamInvitation.wav"
		static constant WIN_SOUND             = "Sound\\Interface\\ClanInvitation.wav"
		static constant DEF_SOUND             = "Sound\\Interface\\QuestFailed.wav"

		static bool ended       = false
		static int westCount   = 0
		static int eastCount   = 0
		static int array shipClass
		static int array scoreboardRows
		static unit westRepair
		static unit eastRepair
		static unit westHangar
		static unit eastHangar
		static unit array westUtility
		static unit array eastUtility
		static unit array captains
		static string array colors
		static string array names
		static int array kills
		static int array deaths
		static int array assists
		static int array farm

		static MyBoard scoreboard

		static unit array westKeep
		static unit array eastKeep
		static int westShieldsLeft = 10
		static int eastShieldsLeft = 10
		static group grp = CreateGroup()

		static constant REWARD_MODEL = "Abilities\\Spells\\Items\\AIam\\AIamTarget.mdl"

		static function reward(unit u, int gold, int bonusExperience)
			player  owner = GetOwningPlayer(u)
			int id    = GetPlayerId(owner)
			let     uX    = GetUnitX(u)
			let     uY    = GetUnitY(u)

			if gold > 0
				FloatText.goldBounty(uX, uY + FloatText.VERTICAL_KERNING/2., gold, id)


			if bonusExperience > 0
				FloatText.tradeExperienceBounty(uX, uY - FloatText.VERTICAL_KERNING/2., bonusExperience, id)


			Players.tradeExp[id] += bonusExperience
			SetPlayerState(owner, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(owner, PLAYER_STATE_RESOURCE_GOLD)+gold)
			DestroyEffect(AddSpecialEffectTarget(REWARD_MODEL, u, "origin"))
			DisplayTextToPlayer(owner, 0., 0., "You received |cffffcc00" + I2S(gold) + "|r gold and |cffffcc00" + I2S(bonusExperience) + "|r trading experience.")


		static function playerIsWest(int id) returns bool
			return GetUnitX(Ships.ships[id]) < 0.


		static function farmIncrement(int pID)
			farm[pID]++
			scoreboard.setValue(4, scoreboardRows[pID], I2S(farm[pID]))


		static function parseKill(int pID)
			kills[pID]++

			if pID < 7
				kills[0]++
			else
				kills[1]++

			scoreboard.setTitleText("|cffffcc00Scoreboard|r [|cffffffff" + I2S(kills[0]) + " - " + I2S(kills[1]) + "|r]")
			scoreboard.setValue(1, scoreboardRows[pID], I2S(kills[pID]))


		static function addDeath(unit u)
			int id = GetPlayerId(GetOwningPlayer(u))
			deaths[id] = deaths[id] + 1
			if id < 7
				deaths[0]++
			else
				deaths[1]++

			scoreboard.setValue(2, scoreboardRows[id], I2S(deaths[id]))


		static function updateIcon(int pID)
			int unitType = shipClass[pID]
			scoreboard.setIcon(0, scoreboardRows[pID], ship_get_icon(unitType))


		static function addQuest(string desc, string iconPath, bool required, string title) returns quest
			quest q = CreateQuest()
			QuestSetCompleted(  q, false)
			QuestSetDescription(q, desc)
			QuestSetDiscovered( q, true)
			QuestSetEnabled(    q, true)
			QuestSetIconPath(   q, iconPath)
			QuestSetRequired(   q, required)
			QuestSetTitle(
				q,
				(required ? "|cffffcc00" : "|cff88dd66") +
				title +
				"|r"
			)
			return q


		static function initializeQuests()
			// Primary Quests (Left).
			// description.
			addQuest(    MAP_DESCRIP, DESCRIPTION_ICON, true, DESCRIPTION_TITLE)
			// weapons.
			addQuest(WEAPONS_DESCRIP,     WEAPONS_ICON, true,     WEAPONS_TITLE)
			// equipment.
			addQuest(  EQUIP_DESCRIP,       EQUIP_ICON, true,       EQUIP_TITLE)
			// classes.
			addQuest(  CLASS_DESCRIP,       CLASS_ICON, true,       CLASS_TITLE)

			// Commands.
			addQuest(DESCRIPTION_COMMANDS, ICON_COMMANDS, true, TITLE_COMMANDS)

			// Secondary Quests (Right).
			// info.
			addQuest( INFO_DESCRIP,  INFO_ICON, false,  INFO_TITLE)
			// credits.
			addQuest(CREDS_DESCRIP, CREDS_ICON, false, CREDS_TITLE)


		static function c()
			unit tU = GetTriggerUnit()
			if GetUnitTypeId(tU) == SHIELD_ID
				if GetOwningPlayer(tU) == Player(0)
					westShieldsLeft--
					if westShieldsLeft < 1
						SetUnitInvulnerable(westKeep[0], false)

				else
					eastShieldsLeft--
					if eastShieldsLeft < 1
						SetUnitInvulnerable(eastKeep[0], false)


		static function fadeOut(real duration)
			EnableUserUI(false)
			SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
			SetCineFilterBlendMode(BLEND_MODE_BLEND)
			SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
			SetCineFilterStartUV(0, 0, 1, 1)
			SetCineFilterEndUV(0, 0, 1, 1)
			SetCineFilterStartColor(0, 0, 0, 0)
			SetCineFilterEndColor(0, 0, 0, 255)
			SetCineFilterDuration(duration)
			DisplayCineFilter(true)


		static function fadeIn(real duration)
			EnableUserUI(true)
			SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
			SetCineFilterBlendMode(BLEND_MODE_BLEND)
			SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
			SetCineFilterStartUV(0, 0, 1, 1)
			SetCineFilterEndUV(0, 0, 1, 1)
			SetCineFilterStartColor(0, 0, 0, 255)
			SetCineFilterEndColor(0, 0, 0, 0)
			SetCineFilterDuration(duration)
			DisplayCineFilter(true)


		static function defeatTeam(int team)
			if team == 0
				RemovePlayer(players[1], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[7], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[8], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[9], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[10], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[11], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(players[0], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(players[2], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(players[3], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(players[4], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(players[5], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(players[6], PLAYER_GAME_RESULT_DEFEAT)
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[2])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[3])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[4])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[5])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[6])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[7])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[8])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[9])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[10])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[11])
			else
				RemovePlayer(Player(1), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(7), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(8), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(9), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(10), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(11), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(0), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(2), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(3), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(4), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(5), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(6), PLAYER_GAME_RESULT_VICTORY)
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[2])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[3])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[4])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[5])
				SoundsLib.playForPlayer(WIN_SOUND, 1., players[6])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[7])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[8])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[9])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[10])
				SoundsLib.playForPlayer(DEF_SOUND, 1., players[11])


		static function pauseUnits()
			unit first

			GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
			while FirstOfGroup(grp) != null
				first = FirstOfGroup(grp)
				first..pause()..setTimeScale(0.)..addAbility('Aloc')

				GroupRemoveUnit(grp, first)


		static function defeatC()
			unit tU = GetTriggerUnit()
			if tU == westKeep[0]
				DisplayTextToPlayer(localPlayer, 0., 0., "The |cffffcc00Eastern Kingdom|r has won! This game will end automatically in 30 seconds.")
				pauseUnits()
				ended = true
				fadeOut(FADEOUT_DURATION)
				Muscii.interrupt()
				doAfter(5.) ->
					Stats.display(localPlayer)
				doAfter(30.) ->
					defeatTeam(0)
					EndGame(true)
			else if tU == eastKeep[0]
				DisplayTextToPlayer(localPlayer, 0., 0., "The |cffffcc00Western Kingdom|r has won! This game will end automatically in 30 seconds.")
				pauseUnits()
				ended = true
				fadeOut(FADEOUT_DURATION)
				Muscii.interrupt()
				doAfter(5.) ->
					Stats.display(localPlayer)
				doAfter(30.) ->
					defeatTeam(1)
					EndGame(true)


		static function after()
			int id = GetPlayerId(localPlayer)
			DestroyTimer(GetExpiredTimer())
			SoundsLib.play(START_SOUND, .75, 127)
			fadeIn(1.)
			PanCameraToTimed(GetUnitX(Ships.ships[id]), GetUnitY(Ships.ships[id]), 0.)
			if localPlayer == GetOwningPlayer(Ships.ships[id])
				ClearSelection()
				SelectUnit(Ships.ships[id], true)


	init
		int index = 0

		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function Game.defeatC)
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function Game.c)
		Game.initializeQuests()

		// Set starting gold and initialize player array.
		while index <= 11
			players[index] = Player(index)
			SetPlayerState(players[index], PLAYER_STATE_RESOURCE_GOLD, Game.START_GOLD)

			index++


		// Create starting ships for players.
		index = 2
		while index <= 11
			if GetPlayerSlotState(players[index]) == PLAYER_SLOT_STATE_PLAYING
				Players.playerCount++
				Players.playing[index]  = true
				Game.shipClass[index]   = ID_HELICOPTER
				Game.captains[index]    = CreateUnit(players[index], ID_CAPTAIN, GetStartLocationX(index), GetStartLocationY(index), 270.)
				Players.tradeExp[index] = 0
				Game.kills[index]       = 0
				Game.deaths[index]      = 0
				Game.assists[index]     = 0
				Game.farm[index]        = 0
				Game.names[index]       = GetPlayerName(players[index])

				if index < 7
					Ships.ships[index] = CreateUnit(players[index], ID_HELICOPTER, TerrainData.WESTX + Game.SHIP_OFFSET + Game.LATER_OFFSET*Cos(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), Game.LATER_OFFSET*Sin(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), 270.)
					Game.westCount++
				else
					Ships.ships[index] = CreateUnit(players[index], ID_HELICOPTER, TerrainData.EASTX - Game.SHIP_OFFSET + Game.LATER_OFFSET*Cos(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), Game.LATER_OFFSET*Sin(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), 270.)
					Game.eastCount++

				if not GetPlayerController(players[index]) == MAP_CONTROL_USER
					players[index].intoAi()

			else
				Players.playing[index] = false


			index++


		// Potentially turn on single-player mode.
		if Players.playerCount < 2
			SinglePlayer.enable()

		// Make alliance units give bounty.
		SetPlayerState(players[0], PLAYER_STATE_GIVES_BOUNTY, 1)
		SetPlayerState(players[1], PLAYER_STATE_GIVES_BOUNTY, 1)

		// Create keeps.
		Game.westKeep[0] = CreateUnit(players[0], ID_KEEP_P1, TerrainData.WESTX, 0, 270)
		Game.eastKeep[0] = CreateUnit(players[1], ID_KEEP_P1, TerrainData.EASTX, 0, 270)
		SetUnitInvulnerable(Game.westKeep[0], true)
		SetUnitInvulnerable(Game.eastKeep[0], true)
		Game.westKeep[1] = CreateUnit(players[0], ID_KEEP_P2, TerrainData.WESTX, 0., 270.)
		Game.eastKeep[1] = CreateUnit(players[1], ID_KEEP_P2, TerrainData.EASTX, 0., 270.)

		// Create shields.
		index = 0
		while index < Game.SHIELD_COUNT
			CreateUnit(players[0], Game.SHIELD_ID, TerrainData.WESTX+Game.SHIELDOFFS*Cos(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), Game.SHIELDOFFS*Sin(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), 270.)

			index++


		index = 0
		while index < Game.SHIELD_COUNT
			CreateUnit(players[1], Game.SHIELD_ID, TerrainData.EASTX+Game.SHIELDOFFS*Cos(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), Game.SHIELDOFFS*Sin(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), 270.)

			index++


		// Stop Time of Day.
		SetTimeOfDayScale(0.)

		// Create Repair Ports.
		Game.westRepair = CreateUnit(players[0], Game.REPAIR_ID, TerrainData.WESTX, 512., 270.)
		Game.eastRepair = CreateUnit(players[1], Game.REPAIR_ID, TerrainData.EASTX, 512., 270.)

		// Create Hangars.
		Game.westHangar = CreateUnit(players[0], ID_HANGAR, TerrainData.WESTX - 512., 0., 270.)
		Game.eastHangar = CreateUnit(players[1], ID_HANGAR, TerrainData.EASTX + 512., 0., 270.)

		// Create Utility Ports.
		Game.westUtility[0] = CreateUnit(players[0], ID_PORT_P1, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[1] = CreateUnit(players[0], ID_PORT_P2, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[2] = CreateUnit(players[0], ID_PORT_P3, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[3] = CreateUnit(players[0], ID_PORT_P4, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[0] = CreateUnit(players[1], ID_PORT_P1, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[1] = CreateUnit(players[1], ID_PORT_P2, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[2] = CreateUnit(players[1], ID_PORT_P3, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[3] = CreateUnit(players[1], ID_PORT_P4, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)

		// Create Stone Spider (Trade Related).
		let s = CreateUnit(Players.playerPassive, Game.STONE_SPIDER_ID, TerrainData.STONE_SPIDER_X, TerrainData.STONE_SPIDER_Y, Game.STONE_SPIDER_FACING)
		s..addAbility('Aloc')..setTimeScale(0.)

		// Do starting sound stuff.
		SoundsLib.preload(Game.START_SOUND)
		TimerStart(CreateTimer(), Game.START_TIME, false, function Game.after)

		// Initial blackness.
		Game.fadeOut(0.)
		DisplayTimedTextToPlayer(localPlayer, 0., 0., 10., Game.WELCOME_MESSAGE)

		SoundsLib.preload(Game.WIN_SOUND)
		SoundsLib.preload(Game.DEF_SOUND)
		SoundsLib.preload(Game.TRADE_SUCCESS_SOUND)

		// Colors.
		Game.colors[0] = "|cffff0303"
		Game.colors[1] = "|cff0042ff"
		Game.colors[2] = "|cff1ce6b9"
		Game.colors[3] = "|cff540081"
		Game.colors[4] = "|cfffffc01"
		Game.colors[5] = "|cfffeba0e"
		Game.colors[6] = "|cff20c000"
		Game.colors[7] = "|cffe55bb0"
		Game.colors[8] = "|cff959697"
		Game.colors[9] = "|cff7ebff1"
		Game.colors[10] = "|cff106246"
		Game.colors[11] = "|cff4e2a04"

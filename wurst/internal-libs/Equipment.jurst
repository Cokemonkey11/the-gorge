// Making a new trade route:
//   * Create necessary items in object editor (contract and anything else)
//   * Add all those new items to Equipment constants
//   * Add contract cost to Equipment.getContractCost
//   * Add the item to Equipment.classes (done in Equipment#init)
//   * Add necessary items to DestroyDroppedContracts.tradeItems (done in DestroyDroppedContracts#init)
//   * Fill in pawned items in TradeRewardsPawn#c as necessary
//   * Fill in remaining triggers as necessary

package Equipment
	import SimError
	import Ships
	import Game
	import Players
	import RegisterPlayerUnitEvent

	public class Equipment
		static constant CLASS_UNKNOWN    = -1
		static constant CLASS_ENGINE     =  0
		static constant CLASS_MECHANIC   =  1
		static constant CLASS_HULL       =  2
		static constant CLASS_SHIELDGEN  =  3
		static constant CLASS_TELEPORT   =  4
		static constant CLASS_SPECIAL    =  5
		static constant CLASS_CONTRACT   =  6

		static constant PAGE_1_2         = 'I003'
		static constant PAGE_2_1         = 'I004'
		static constant PAGE_2_3         = 'I006'
		static constant PAGE_3_2         = 'I007'
		static constant PAGE_3_4         = 'I00A'
		static constant PAGE_4_3         = 'I00B'
		static constant KPAGE_1_2        = 'I00E'
		static constant KPAGE_2_1        = 'I00F'

		static constant DATA_ID          = 'I00D'
		static constant TOXIC_SUBST_FULL = 'I00H'
		static constant VENOM_VIAL       = 'I00J'

		// Engines
		static constant STEAM_CORE     = 'I000'
		// Mechanics
		static constant PROBLEM_SOLVER = 'I001'
		// Hulls
		static constant STONE_HULL     = 'I002'
		// Shield Generators
		static constant BRONZE_GEN     = 'I005'
		// Teleporters
		static constant IONIC_TELEPORT = 'I008'
		// Special
		static constant SHIP_LOCATOR   = 'I009'
		// Contracts
		static constant DATA_ACQUISIT         = 'I00C'
		static constant TOXIC_SUBST           = 'I00G'
		static constant SPIDER_VENOM_CONTRACT = 'I00I'

		// Hull reduction levels
		static constant REDUCTION1 = 10

		static constant WRONG_CLASS             = "Your ship class cannot use that type of equipment."
		static constant INSUFFICIENT_EXPERIENCE = "You have insufficient experience for the selected contract."

		static constant EQUIPMENT_SELL_VALUE = 1.

		static Table classes

		static Table reduction

		static function autoPawnItemForPlayer takes int pID, item it returns nothing
			int val = R2I(GetWidgetLife(it))
			if val>1 then
				DisplayTextToPlayer(Players.players[pID], 0., 0., "Your |cffffcc00"+GetUnitName(Ships.ships[pID])+"|r cannot acquire a |cffffcc00"+GetItemName(it)+"|r; it was automatically pawned for |cffffcc00"+I2S(val)+"|r gold.")
				SetPlayerState(Players.players[pID], PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Players.players[pID], PLAYER_STATE_RESOURCE_GOLD)+val)
			end
			RemoveItem(it)
		end

		static function getItemClassId takes int id returns int
			if classes.hasInt(id) then
				return classes.loadInt(id)
			end
			return CLASS_UNKNOWN
		end

		static function getItemClass takes item it returns int
			return getItemClassId(GetItemTypeId(it))
		end

		// Checks if a unit has a pair of items with the same item class.
		//
		// Parameters:
		//   unit u:      the unit in question
		//   int cls: the item class for validation
		//
		// Returns true if `u` has two items of class `cls`
		static function unitHasClassPair takes unit u, int cls returns bool
			int index = 0
			int count = 0

			loop
				exitwhen index > 5

				if getItemClass(UnitItemInSlot(u, index)) == cls then
					count++
					if count > 1 then
						return true
					end
				end

				index++
			end

			return false
		end

		static function unitHasItemOfClass takes unit u, int cls returns item
			int index = 0
			item it = null

			loop
				exitwhen index > 5

				it = UnitItemInSlot(u, index)
				if getItemClass(it) == cls then
					return it
				end

				index++
			end

			return it
		end

		static function unitHasItemOfTypeSlot takes unit u, int id returns int
			int index = 0

			loop
				exitwhen index > 5

				if GetItemTypeId(UnitItemInSlot(u, index)) == id then
					return index
				end

				index++
			end

			return -1
		end

		// Returns true if the unit u has all inventory spaces used.
		static function noItemSlot takes unit u returns bool
			let count = UnitInventorySize(u)
			int index = 0

			loop
				exitwhen index >= count

				if not GetItemTypeId(UnitItemInSlot(u, index)) > 0 then
					return false
				end

				index++
			end

			return true
		end

		static function unitHasItemOfType takes unit u, int id returns bool
			return unitHasItemOfTypeSlot(u, id) > -1
		end

		static function unitHasTypePair takes unit u, int id returns bool
			int index = 0
			int count = 0
			loop
				exitwhen index>5
				if GetItemTypeId(UnitItemInSlot(u, index)) == id then
					count = count +1
					if count>1 then
						return true
					end
				end
				index= index+1
			end
			return false
		end

		static function unitCanAcquireItemIdPost takes unit u, int id returns bool
			int shipClass = Ships.getClass(u)
			int itemClass = getItemClassId(id)

			if unitHasClassPair(u, itemClass) and itemClass!= CLASS_UNKNOWN and itemClass != CLASS_CONTRACT and itemClass != CLASS_SPECIAL then
				return false
			elseif unitHasTypePair(u, id) then
				return false
			elseif shipClass == Ships.CLASS_FRIGATE and itemClass== CLASS_CONTRACT then
				return false
			elseif shipClass == Ships.CLASS_SMUGGLER and (itemClass== CLASS_HULL or itemClass== CLASS_SHIELDGEN or id== SHIP_LOCATOR) then
				return false
			elseif shipClass == Ships.CLASS_INTERCEPTOR and itemClass== CLASS_CONTRACT then
				return false
			elseif shipClass == Ships.CLASS_BATTLESHIP and (itemClass== CLASS_TELEPORT or itemClass== CLASS_CONTRACT or id== SHIP_LOCATOR) then
				return false
			end
			return true
		end

		static function unitCanAcquireItemId takes unit u, int id returns bool
			int shipClass = Ships.getClass(u)
			int itemClass = getItemClassId(id)
			if unitHasItemOfClass(u, itemClass)!= null and itemClass!= CLASS_UNKNOWN and itemClass != CLASS_CONTRACT and itemClass != CLASS_SPECIAL then
				return false
			elseif unitHasItemOfType(u, id) then
				return false
			elseif shipClass == Ships.CLASS_FRIGATE and itemClass== CLASS_CONTRACT then
				return false
			elseif shipClass == Ships.CLASS_SMUGGLER and (itemClass== CLASS_HULL or itemClass== CLASS_SHIELDGEN or id== SHIP_LOCATOR) then
				return false
			elseif shipClass == Ships.CLASS_INTERCEPTOR and itemClass== CLASS_CONTRACT then
				return false
			elseif shipClass == Ships.CLASS_BATTLESHIP and (itemClass== CLASS_TELEPORT or itemClass== CLASS_CONTRACT or id== SHIP_LOCATOR) then
				return false
			end
			return true
		end

		static function playerCanAcquireItem takes int pID, item it returns bool
			return unitCanAcquireItemId(Ships.ships[pID], GetItemTypeId(it))
		end

		static function unitCanAcquireItem takes unit u, item it returns bool
			return unitCanAcquireItemId(u, GetItemTypeId(it))
		end

		static function playerAddItemFromIdConditional takes int pID, int id returns bool
			real x = GetUnitX(Ships.ships[pID])
			real y = GetUnitY(Ships.ships[pID])
			item temp
			if unitCanAcquireItemId(Ships.ships[pID], id) then
				UnitAddItem(Ships.ships[pID], CreateItem(id, x, y))
				return true
			else
				temp = CreateItem(id, 0., 0.)
				autoPawnItemForPlayer(pID, temp)
			end
			return false
		end

		static function playerAddItemsFromIdConditional takes int pID, int i0, int i1, int i2, int i3, int i4, int i5 returns nothing
			if i0>0 then
				playerAddItemFromIdConditional(pID, i0)
			end
			if i1>0 then
				playerAddItemFromIdConditional(pID, i1)
			end
			if i2>0 then
				playerAddItemFromIdConditional(pID, i2)
			end
			if i3>0 then
				playerAddItemFromIdConditional(pID, i3)
			end
			if i4>0 then
				playerAddItemFromIdConditional(pID, i4)
			end
			if i5>0 then
				playerAddItemFromIdConditional(pID, i5)
			end
		end

		static function playerAddItemsFromId takes int pID, int i0, int i1, int i2, int i3, int i4, int i5 returns nothing
			real x = GetUnitX(Ships.ships[pID])
			real y = GetUnitY(Ships.ships[pID])
			if i0>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i0, x, y))
			end
			if i1>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i1, x, y))
			end
			if i2>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i2, x, y))
			end
			if i3>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i3, x, y))
			end
			if i4>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i4, x, y))
			end
			if i5>0 then
				UnitAddItem(Ships.ships[pID], CreateItem(i5, x, y))
			end
		end

		static function tradeExperience takes player who returns int
			return Players.tradeExp[GetPlayerId(who)]
		end

		// Get the cost of a trade contract, in trade experience.
		static function getContractCost takes item it returns int
			int typ = GetItemTypeId(it)
			if     typ == DATA_ACQUISIT then
				return 0
			elseif typ == TOXIC_SUBST then
				return 1
			elseif typ == SPIDER_VENOM_CONTRACT then
				return 4
			end
			return -1
		end

		static function pageC takes nothing returns bool
			item sI= GetSoldItem()
			unit seller = GetTriggerUnit()
			unit buyer = GetBuyingUnit()
			unit toSelect = null
			int id = GetItemTypeId(sI)
			player owner = GetOwningPlayer(buyer)
			bool was = false
			if id == PAGE_1_2 then
				was = true
				if seller == Game.westUtility[0] then
					toSelect = Game.westUtility[1]
				else
					toSelect = Game.eastUtility[1]
				end
			elseif id== PAGE_2_1 then
				was = true
				if seller == Game.westUtility[1] then
					toSelect = Game.westUtility[0]
				else
					toSelect = Game.eastUtility[0]
				end
			elseif id== PAGE_2_3 then
				was = true
				if seller == Game.westUtility[1] then
					toSelect = Game.westUtility[2]
				else
					toSelect = Game.eastUtility[2]
				end
			elseif id== PAGE_3_2 then
				was = true
				if seller == Game.westUtility[2] then
					toSelect = Game.westUtility[1]
				else
					toSelect= Game.eastUtility[1]
				end
			elseif id== PAGE_3_4 then
				was = true
				if seller == Game.westUtility[2] then
					toSelect = Game.westUtility[3]
				else
					toSelect = Game.eastUtility[3]
				end
			elseif id== PAGE_4_3 then
				was = true
				if seller == Game.westUtility[3] then
					toSelect = Game.westUtility[2]
				else
					toSelect = Game.eastUtility[2]
				end
			elseif id== KPAGE_1_2 then
				was = true
				if seller == Game.westKeep[0] then
					toSelect = Game.westKeep[1]
				else
					toSelect = Game.eastKeep[1]
				end
			elseif id== KPAGE_2_1 then
				was = true
				if seller == Game.westKeep[1] then
					toSelect = Game.westKeep[0]
				else
					toSelect = Game.eastKeep[0]
				end
			end
			if was then
				RemoveItem(sI)
				if Players.localPlayer == owner then
					SelectUnit(seller, false)
					SelectUnit(toSelect, true)
				end
			end

			return false
		end

		static function resetUnitDamageReduction takes unit u returns nothing
			int index = 0
			loop
				exitwhen index>5
				if GetItemTypeId(UnitItemInSlot(u, index)) == STONE_HULL then
					reduction.saveInt(u.getHandleId(), REDUCTION1)
					return
				end
				index = index +1
			end

			reduction.saveInt(u.getHandleId(), 0)
		end

		static function c takes nothing returns bool
			unit buyer = GetBuyingUnit()
			item sI= GetSoldItem()
			player buyerP = GetOwningPlayer(buyer)
			real val
			int class = getItemClass(sI)
			bool has = unitHasItemOfType(buyer, GetItemTypeId(sI))
			item it = unitHasItemOfClass(buyer, class)

			if has or GetItemTypeId(sI) == GetItemTypeId(it) then
				simError(buyerP, "You can't carry two of the same equipment.")
				val = GetWidgetLife(sI)
				if val>1. then
					SetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD) + R2I(val))
				end
				RemoveItem(sI)
			elseif not unitCanAcquireItem(buyer, sI) then
				val = GetWidgetLife(sI)
				RemoveItem(sI)
				SetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD) + R2I(val))
				simError(buyerP, WRONG_CLASS)
			else
				if it!= null and class!= CLASS_UNKNOWN and class!= CLASS_SPECIAL and class!= CLASS_CONTRACT then
					val = GetWidgetLife(it)
					SetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(buyerP, PLAYER_STATE_RESOURCE_GOLD) + R2I(val))
					DisplayTextToPlayer(buyerP, 0., 0., "|cffffcc00Note:|r Your item of type |cffffcc00"+GetItemName(it)+"|r was automatically sold for |cffffcc00"+I2S(R2I(val))+"|r gold to accomodate your new |cffffcc00"+GetItemName(sI)+"|r.")
					RemoveItem(it)
				elseif class== CLASS_CONTRACT and getContractCost(sI)>tradeExperience(buyerP) then
					RemoveItem(sI)
					simError(buyerP, INSUFFICIENT_EXPERIENCE)
				end
			end

			resetUnitDamageReduction(buyer)
			return false
		end
	end

	init
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM, function Equipment.c)
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM, function Equipment.pageC)

		// Initialize class table
		Equipment.classes = new Table
		Equipment.classes.saveInt(Equipment.STEAM_CORE,            Equipment.CLASS_ENGINE)
		Equipment.classes.saveInt(Equipment.PROBLEM_SOLVER,        Equipment.CLASS_MECHANIC)
		Equipment.classes.saveInt(Equipment.STONE_HULL,            Equipment.CLASS_HULL)
		Equipment.classes.saveInt(Equipment.BRONZE_GEN,            Equipment.CLASS_SHIELDGEN)
		Equipment.classes.saveInt(Equipment.IONIC_TELEPORT,        Equipment.CLASS_TELEPORT)
		Equipment.classes.saveInt(Equipment.SHIP_LOCATOR,          Equipment.CLASS_SPECIAL)
		Equipment.classes.saveInt(Equipment.DATA_ACQUISIT,         Equipment.CLASS_CONTRACT)
		Equipment.classes.saveInt(Equipment.TOXIC_SUBST,           Equipment.CLASS_CONTRACT)
		Equipment.classes.saveInt(Equipment.SPIDER_VENOM_CONTRACT, Equipment.CLASS_CONTRACT)

		Equipment.reduction = new Table
	end

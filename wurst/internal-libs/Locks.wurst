package Locks

import AbilityObjEditing
import InstantDummyCaster
import ErrorHandling
import HashMap

constant ID_FIREBOLT = '!stn'
constant ID_STUNNED  = 'BPSE'

/**
    Implements boolean locks for a resource.

    A boolean locked is either locked (at least one uid associated), or unlocked
    (no uids associated).
*/
public module Lock<T>
    private static constant locks = new HashMap<T, int>()

    protected static function lock(T resource)
        if not locks.has(resource)
            locks.put(resource, 0)
        locks.put(resource, locks.get(resource) + 1)

    protected static function unlock(T resource) returns bool
        let them = locks.get(resource)
        locks.put(resource, them - 1)

        if them == 1
            callback(resource)
        return them == 1

    static function have(T resource) returns bool
        return locks.has(resource) and locks.get(resource) > 0

    protected static function callback(T _t)
        skip

/**
    Multi-instanceable stuns for a unit.  The unit is unstunnned if each
    added stun is removed.

    Example usage:

    ```
    package Example
    import ClosureTimers
    init
        let u = createUnit(...)
        doPeriodically(3.) ->
            StunLocks.add(u)
            doAfter(1.) ->
                StunLocks.remove(u)
        doPeriodically(9.) ->
            StunLocks.add(u)
            doAfter(3.) ->
                StunLocks.remove(u)
    ```

    In the above example, the unit is paused/stunned whenever either of the
    competing StunLocks is held.
*/
public class StunLocks
    use Lock<unit>

    override static function callback(unit u)
        u.removeAbility(ID_STUNNED)

    construct()
        error("StunLocks shouldn't be instantiated")

    static function add(unit u)
        lock(u)
        InstantDummyCaster.castTarget(players[PLAYER_NEUTRAL_AGGRESSIVE], ID_FIREBOLT, 1, "firebolt", u, u.getPos())

    static function remove(unit u) returns bool
        return unlock(u)


/**
    Multi-instanceable invulnerability for a unit.  The unit is rendered vulnerable
    if each added invulnerable lock is removed.

    Example usage:

    ```
    package Example
    import ClosureTimers
    init
        let u = createUnit(...)
        doPeriodically(3.) ->
            let lock = new InvulnerableLocks(u)
            doAfter(1.) ->
                destroy lock
        doPeriodically(9.) ->
            let lock = new InvulnerableLocks(u)
            doAfter(3.) ->
                destroy lock
    ```

    In the above example, the unit is made invulnerable/vulnerable whenever either of the
    competing InvulnerableLocks is held.
*/
public class InvulnerableLocks
    use Lock<unit>

    unit which

    override static function callback(unit u)
        u.setInvulnerable(false)

    construct(unit which)
        this.which = which
        which.setInvulnerable(true)
        lock(which)

    ondestroy
        unlock(which)


@compiletime function gen_firebolt()
    new AbilityDefinitionFireBolt(ID_FIREBOLT)
        ..setDamage(1, 0.)
        ..setDummyAbility()
        ..setMissileArt("")
        ..setDurationNormal(1, 999999.)

package Game
	import Ships
	import MyBoard
	import RegisterPlayerUnitEvent
	import Sounds
	import Muscii
	import TerrainData
	import FloatText
	import Players

	struct AssistTimestamps
		integer array vals[12]
	end

	public class Game
		static constant string HELICOPTER_ICON     = "ReplaceableTextures\\CommandButtons\\BTNFlyingMachine.blp"
		static constant string PARACOPTER_ICON     = "ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp"
		static constant string ZEPPELIN_ICON       = "ReplaceableTextures\\CommandButtons\\BTNGoblinZeppelin.blp"
		static constant string SKYBARGE_ICON       = "ReplaceableTextures\\CommandButtons\\BTNUndeadAirBarge.blp"
		static constant string TRADE_SUCCESS_SOUND = "Sound\\Interface\\QuestLog.wav"

		static constant integer KEEP_ID             = 'h001'
		static constant integer KEEP2_ID            = 'h00F'
		static constant integer SHIELD_ID           = 'h003'
		static constant integer REPAIR_ID           = 'h004'
		static constant integer HANGAR_ID           = 'h00A'
		static constant integer UTILITY_ID          = 'h006'
		static constant integer UTILITY2_ID         = 'h007'
		static constant integer UTILITY3_ID         = 'h008'
		static constant integer UTILITY4_ID         = 'h009'
		static constant integer CAPTAIN_ID          = 'H00C'
		static constant integer OUTPOST_ID          = 'h002'
		static constant integer DUMMY_ID            = 'u000'
		static constant integer STONE_SPIDER_ID     = 'n000'
		static constant integer ASSIST_TIME         =    15
		static constant integer START_GOLD          =   200
		static constant integer SHIELD_COUNT        =    10
		static constant real    SHIELDOFFS          =   200.
		static constant real    FADEOUT_DURATION    =    10.
		static constant real    START_TIME          =     3.
		static constant real    SHIP_OFFSET         =   328.
		static constant real    LATER_OFFSET        =   128.
		static constant real    STONE_SPIDER_FACING =   204.

		static constant string MAP_DESCRIPTION       = "|cffffcc00The Gorge|r is a MOBA/AoS style game with elements from the classic Sked map " + /*
			*/ "|cffffcc00Battleships|r. The objective of the game is to use teamwork to push the neutral waves to the opposing base and destroy it."
		static constant string DESCRIPTION_ICON_PATH = "ReplaceableTextures\\CommandButtons\\BTNBansheeAdept.blp"
		static constant string DESCRIPTION_TITLE     = "|cffffcc00Description|r"

		static constant string WEAPONS_DESCRIP       = "Your ship gains the ability to attack nearby enemies by the |cffffcc00Crew members|r purchased in " + /*
			*/ "your base. Each crew member has unique stats and will attack automatically when in range of an enemy."
		static constant string WEAPONS_ICON          = "ReplaceableTextures\\CommandButtons\\BTNBookOfTheDead.blp"
		static constant string WEAPONS_TITLE         = "|cffffcc00Weapons|r"

		static constant string EQUIP_DESCRIP         = "Equipment are items which can be carried by your ship. Equipment are separated into classes: " + /*
			*/ "|cffffcc00Engine|r, |cffffcc00Mechanic|r, |cffffcc00Hull|r, |cffffcc00Teleporter|r, |cffffcc00Shield Generator|r, |cffffcc00Contract|r, " + /*
			*/ "and |cffffcc00Special|r. A ship can only carry one item of each class, except for |cffffcc00Special|r and |cffffcc00Contract|r. " + /*
			*/ "Additionally, some |cffffcc00Ship Classes|r cannot use certain item classes."
		static constant string EQUIP_ICON            = "ReplaceableTextures\\CommandButtons\\BTNSorceressMaster.blp"
		static constant string EQUIP_TITLE           = "|cffffcc00Equipment|r"

		static constant string CLASS_DESCRIP         = "During a round of warfare in |cffffcc00The Gorge|r, you will encounter the different classes of " + /*
			*/ "Ship: |cffffcc00Frigates|r are well rounded ships designed to do well in most scenarios; |cffffcc00Battleships|r are heavy ships designed " + /*
			*/ "for warfare with large space for crew and good ability to tank damage; |cffffcc00Interceptors|r are fast moving ships which excel in " + /*
			*/ "chasing enemies and stopping smugglers; |cffffcc00Smugglers|r are small, light ships with abilities that aid in completing trade routes " + /*
			*/ "for earning money."
		static constant string CLASS_ICON            = "ReplaceableTextures\\CommandButtons\\BTNGreaterRejuvScroll.blp"
		static constant string CLASS_TITLE           = "|cffffcc00Ship Classes|r"

		static constant string INFO_DESCRIP          = "|cffffcc00The Gorge|r is an independently developed mini-game by |cffffcc00Cokemonkey11|r. For " + /*
			*/ "map updates, or to say hello, find me on |cffffcc00hiveworkshop.com|r."
		static constant string INFO_ICON             = "ReplaceableTextures\\CommandButtons\\BTNNecromancerMaster.blp"
		static constant string INFO_TITLE            = "|cff88dd66Information|r"

		static constant string CREDS_DESCRIP         = "I'd like to thank |cffffcc00Sked|r, who developed the original Battleships map independantly and " + /*
			*/ "envisioned a game with automatically attacking weapons (Phoenix Fire). |cffffcc00Vexorian, MindWorX, and Pitzermike|r (among others) who " + /*
			*/ "developed many classic snippets and tools like JassHelper, JNGP, Table, SimError, and more. |cffffcc00looking_for_help|r for discovering a " + /*
			*/ "new method in 2013 for recognizing spells and physical damage independantly in damage detectors. |cffffcc00kr0mat1k|r for the artwork used " + /*
			*/ "in the map preview. |cffffcc00Cage the Elephant|r for writing the song played in the background. |cffffcc00Zwiebelchen|r for writing " + /*
			*/ "TabReader, which inspired me to build Muscii. |cffffcc00bowser499|r for creading myBoard, a multiboard framework. |cffffcc00Kino|r for " + /*
			*/ "doing extensive Terrain work for The Gorge."
		static constant string CREDS_ICON            = "ReplaceableTextures\\CommandButtons\\BTNLesserRejuvScroll.blp"
		static constant string CREDS_TITLE           = "|cff88dd66Credits|r"

		static constant string WELCOME_MESSAGE	      = "Welcome, Captain, to |cffffcc00The Gorge|r. If it is your first time playing, please see the |cffffcc00Information|r Menu."
		static constant string START_SOUND           = "Sound\\Interface\\ArrangedTeamInvitation.wav"
		static constant string WIN_SOUND             = "Sound\\Interface\\ClanInvitation.wav"
		static constant string DEF_SOUND             = "Sound\\Interface\\QuestFailed.wav"

		static boolean ended       = false
		static integer playerCount = 0
		static integer westCount   = 0
		static integer eastCount   = 0
		static integer array shipClass
		static int array tradeExp
		static integer array scoreboardRows
		static real seconds = 0.
		static unit westRepair
		static unit eastRepair
		static unit westHangar
		static unit eastHangar
		static unit array westUtility
		static unit array eastUtility
		static unit array captains
		static boolean array playing
		static string array colors
		static string array names
		static AssistTimestamps array assistTimestamps
		static integer array kills
		static integer array deaths
		static integer array assists
		static integer array farm

		static MyBoard scoreboard

		static unit array westKeep
		static unit array eastKeep
		static integer westShieldsLeft = 10
		static integer eastShieldsLeft = 10
		static integer secondsFSM = 0
		static integer minutesFSM = 0
		static group grp = CreateGroup()

		static constant string REWARD_MODEL = "Abilities\\Spells\\Items\\AIam\\AIamTarget.mdl"

		static function reward takes unit u, integer gold, integer bonusExperience returns nothing
			player  owner = GetOwningPlayer(u)
			integer id    = GetPlayerId(owner)
			let     uX    = GetUnitX(u)
			let     uY    = GetUnitY(u)

			if gold > 0 then
				FloatText.goldBounty(uX, uY + FloatText.VERTICAL_KERNING/2., gold, id)
			end

			if bonusExperience > 0 then
				FloatText.tradeExperienceBounty(uX, uY - FloatText.VERTICAL_KERNING/2., bonusExperience, id)
			end

			tradeExp[id] += bonusExperience
			SetPlayerState(owner, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(owner, PLAYER_STATE_RESOURCE_GOLD)+gold)
			DestroyEffect(AddSpecialEffectTarget(REWARD_MODEL, u, "origin"))
			DisplayTextToPlayer(owner, 0., 0., "You received |cffffcc00"+I2S(gold)+"|r gold and |cffffcc00"+I2S(bonusExperience)+"|r trading experience.")
		end

		static function playerIsWest takes integer id returns boolean
			return GetUnitX(Ships.ships[id])<0.
		end

		static function getMinutes takes nothing returns integer
			return minutesFSM
		end

		static function farmIncrement takes integer pID returns nothing
			farm[pID] = farm[pID] + 1
			scoreboard.setValue(4, scoreboardRows[pID], I2S(farm[pID]))
		end

		static function parseKill takes integer pID returns nothing
			kills[pID] = kills[pID] + 1
			if pID<7 then
				kills[0] = kills[0] + 1
			else
				kills[1] = kills[1] + 1
			end
			scoreboard.setTitleText("|cffffcc00Scoreboard|r [|cffffffff"+I2S(kills[0])+" - "+I2S(kills[1])+"|r]")
			scoreboard.setValue(1, scoreboardRows[pID], I2S(kills[pID]))
		end

		static function addDeath takes unit u returns nothing
			integer id = GetPlayerId(GetOwningPlayer(u))
			deaths[id] = deaths[id] + 1
			if id<7 then
				deaths[0] = deaths[0] + 1
			else
				deaths[1] = deaths[1] + 1
			end
			scoreboard.setValue(2, scoreboardRows[id], I2S(deaths[id]))
		end

		static function updateIcon takes integer pID returns nothing
			integer unitType = shipClass[pID]
			if unitType== Ships.HELICOPTER_ID then
				scoreboard.setIcon(0, scoreboardRows[pID], HELICOPTER_ICON)
			elseif unitType== Ships.PARACOPTER_ID then
				scoreboard.setIcon(0, scoreboardRows[pID], PARACOPTER_ICON)
			elseif unitType== Ships.ZEPPELIN_ID then
				scoreboard.setIcon(0, scoreboardRows[pID], ZEPPELIN_ICON)
			elseif unitType== Ships.SKYBARGE_ID then
				scoreboard.setIcon(0, scoreboardRows[pID], SKYBARGE_ICON)
			end
		end

		static function addQuest takes string desc, string iconPath, boolean required, string title returns quest
			quest q = CreateQuest()
			QuestSetCompleted(q, false)
			QuestSetDescription(q, desc)
			QuestSetDiscovered(q, true)
			QuestSetEnabled(q, true)
			QuestSetIconPath(q, iconPath)
			QuestSetRequired(q, required)
			QuestSetTitle(q, title)
			return q
		end

		static function initializeQuests takes nothing returns nothing
			// Primary Quests (Left)
			// description
			addQuest(MAP_DESCRIPTION, DESCRIPTION_ICON_PATH, true, DESCRIPTION_TITLE)
			// weapons
			addQuest(WEAPONS_DESCRIP, WEAPONS_ICON, true, WEAPONS_TITLE)
			// equipment
			addQuest(EQUIP_DESCRIP, EQUIP_ICON, true, EQUIP_TITLE)
			// classes
			addQuest(CLASS_DESCRIP, CLASS_ICON, true, CLASS_TITLE)
			// Secondary Quests (Right)
			// info
			addQuest(INFO_DESCRIP, INFO_ICON, false, INFO_TITLE)
			// credits
			addQuest(CREDS_DESCRIP, CREDS_ICON, false, CREDS_TITLE)
		end

		static function c takes nothing returns nothing
			unit tU= GetTriggerUnit()
			if GetUnitTypeId(tU) == SHIELD_ID then
				if GetOwningPlayer(tU) == Player(0) then
					westShieldsLeft = westShieldsLeft - 1
					if westShieldsLeft < 1 then
						SetUnitInvulnerable(westKeep[0], false)
					end
				else
					eastShieldsLeft = eastShieldsLeft - 1
					if eastShieldsLeft < 1 then
						SetUnitInvulnerable(eastKeep[0], false)
					end
				end
			end
		end

		static function fadeOut takes real duration returns nothing
			EnableUserUI(false)
			SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
			SetCineFilterBlendMode(BLEND_MODE_BLEND)
			SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
			SetCineFilterStartUV(0, 0, 1, 1)
			SetCineFilterEndUV(0, 0, 1, 1)
			SetCineFilterStartColor(0, 0, 0, 0)
			SetCineFilterEndColor(0, 0, 0, 255)
			SetCineFilterDuration(duration)
			DisplayCineFilter(true)
		end

		static function fadeIn takes real duration returns nothing
			EnableUserUI(true)
			SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
			SetCineFilterBlendMode(BLEND_MODE_BLEND)
			SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
			SetCineFilterStartUV(0, 0, 1, 1)
			SetCineFilterEndUV(0, 0, 1, 1)
			SetCineFilterStartColor(0, 0, 0, 255)
			SetCineFilterEndColor(0, 0, 0, 0)
			SetCineFilterDuration(duration)
			DisplayCineFilter(true)
		end

		static function defeatTeam takes integer team returns nothing
			if team == 0 then
				RemovePlayer(Players.players[1], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[7], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[8], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[9], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[10], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[11], PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Players.players[0], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Players.players[2], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Players.players[3], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Players.players[4], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Players.players[5], PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Players.players[6], PLAYER_GAME_RESULT_DEFEAT)
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[2])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[3])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[4])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[5])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[6])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[7])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[8])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[9])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[10])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[11])
			else
				RemovePlayer(Player(1), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(7), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(8), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(9), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(10), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(11), PLAYER_GAME_RESULT_DEFEAT)
				RemovePlayer(Player(0), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(2), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(3), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(4), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(5), PLAYER_GAME_RESULT_VICTORY)
				RemovePlayer(Player(6), PLAYER_GAME_RESULT_VICTORY)
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[2])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[3])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[4])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[5])
				Sounds.playForPlayer(WIN_SOUND, 1., Players.players[6])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[7])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[8])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[9])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[10])
				Sounds.playForPlayer(DEF_SOUND, 1., Players.players[11])
			end
		end

		static function defeatAfter takes nothing returns nothing
			EndGame(true)
		end

		static function pauseUnits takes nothing returns nothing
			unit first

			GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
			loop
				first = FirstOfGroup(grp)
				exitwhen first == null
				PauseUnit(first, true)
				SetUnitTimeScale(first, 0.)
				UnitAddAbility(first, 'Aloc')
				GroupRemoveUnit(grp, first)
			end
		end

		static function defeatC takes nothing returns nothing
			unit tU = GetTriggerUnit()
			if tU == westKeep[0] then
				DisplayTextToPlayer(GetLocalPlayer(), 0., 0., "The |cffffcc00Eastern Kingdom|r has won! This game will end automatically in 30 seconds.")
				pauseUnits()
				ended = true
				fadeOut(FADEOUT_DURATION)
				defeatTeam(0)
				Muscii.interrupt()
				TimerStart(CreateTimer(), 30., false, function defeatAfter)
			elseif tU == eastKeep[0] then
				DisplayTextToPlayer(GetLocalPlayer(), 0., 0., "The |cffffcc00Western Kingdom|r has won! This game will end automatically in 30 seconds.")
				pauseUnits()
				ended = true
				fadeOut(FADEOUT_DURATION)
				Muscii.interrupt()
				defeatTeam(1)
				TimerStart(CreateTimer(), 30., false, function defeatAfter)
			end
		end

		static function second takes nothing returns nothing
			seconds = seconds + 1.
			secondsFSM = secondsFSM + 1
			if secondsFSM == 60 then
				secondsFSM = 0
				minutesFSM = minutesFSM+1
			end
			debug if seconds < 0. or (seconds == (seconds + 1.)) then
			debug	BJDebugMsg("Seconds overflow!")
			debug end
		end

		static function after takes nothing returns nothing
			integer id = GetPlayerId(Players.localPlayer)
			DestroyTimer(GetExpiredTimer())
			Sounds.play(START_SOUND, .75, 127)
			fadeIn(1.)
			PanCameraToTimed(GetUnitX(Ships.ships[id]), GetUnitY(Ships.ships[id]), 0.)
			if Players.localPlayer == GetOwningPlayer(Ships.ships[id]) then
				ClearSelection()
				SelectUnit(Ships.ships[id], true)
			end
		end
	end

	init
		integer index= 0

		// initialize assist stamps
		integer i = 0
		integer j = 0
		loop
			exitwhen i>11

			Game.assistTimestamps[i] = new AssistTimestamps()

			loop
				exitwhen j>11

				Game.assistTimestamps[i].vals[j] = -1 * Game.ASSIST_TIME

				j = j +1
			end
			i = i +1
		end
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function Game.defeatC)
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function Game.c)
		Players.localPlayer = GetLocalPlayer()
		Players.playerPassive = Player(PLAYER_NEUTRAL_PASSIVE)
		Game.initializeQuests()

		// Set Starting Gold and initialize player array
		loop
			exitwhen index>11

			Players.players[index] = Player(index)
			SetPlayerState(Players.players[index], PLAYER_STATE_RESOURCE_GOLD, Game.START_GOLD)

			index++
		end

		// Create starting ships for players
		index = 2
		loop
			exitwhen index > 11

			if GetPlayerSlotState(Players.players[index])== PLAYER_SLOT_STATE_PLAYING and GetPlayerController(Players.players[index])== MAP_CONTROL_USER then
				Game.playerCount= Game.playerCount+1
				Game.playing[index] = true
				Game.shipClass[index] = Ships.HELICOPTER_ID
				Game.captains[index] = CreateUnit(Players.players[index], Game.CAPTAIN_ID, GetStartLocationX(index), GetStartLocationY(index), 270.)
				Game.tradeExp[index] = 0
				Game.kills[index]    = 0
				Game.deaths[index]   = 0
				Game.assists[index]  = 0
				Game.farm[index]     = 0
				Game.names[index] = GetPlayerName(Players.players[index])

				if index < 7 then
					Ships.ships[index] = CreateUnit(Players.players[index], Ships.HELICOPTER_ID, TerrainData.WESTX+Game.SHIP_OFFSET+Game.LATER_OFFSET*Cos(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), Game.LATER_OFFSET*Sin(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), 270.)
					Game.westCount= Game.westCount+1
				else
					Ships.ships[index] = CreateUnit(Players.players[index], Ships.HELICOPTER_ID, TerrainData.EASTX-Game.SHIP_OFFSET+Game.LATER_OFFSET*Cos(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), Game.LATER_OFFSET*Sin(2.*bj_PI*(I2R(index)-1.5)/10. - bj_PI/2.), 270.)
					Game.eastCount= Game.eastCount+1
				end
			else
				Game.playing[index] = false
			end

			index++
		end

		// Make alliance units give bounty
		SetPlayerState(Players.players[0], PLAYER_STATE_GIVES_BOUNTY, 1)
		SetPlayerState(Players.players[1], PLAYER_STATE_GIVES_BOUNTY, 1)

		// Create keeps
		Game.westKeep[0] = CreateUnit(Players.players[0], Game.KEEP_ID, TerrainData.WESTX, 0, 270)
		Game.eastKeep[0] = CreateUnit(Players.players[1], Game.KEEP_ID, TerrainData.EASTX, 0, 270)
		SetUnitInvulnerable(Game.westKeep[0], true)
		SetUnitInvulnerable(Game.eastKeep[0], true)
		Game.westKeep[1] = CreateUnit(Players.players[0], Game.KEEP2_ID, TerrainData.WESTX, 0., 270.)
		Game.eastKeep[1] = CreateUnit(Players.players[1], Game.KEEP2_ID, TerrainData.EASTX, 0., 270.)

		// Create shields
		index = 0
		loop
			exitwhen index >= Game.SHIELD_COUNT

			CreateUnit(Players.players[0], Game.SHIELD_ID, TerrainData.WESTX+Game.SHIELDOFFS*Cos(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), Game.SHIELDOFFS*Sin(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), 270.)

			index++
		end

		index = 0
		loop
			exitwhen index >= Game.SHIELD_COUNT

			CreateUnit(Players.players[1], Game.SHIELD_ID, TerrainData.EASTX+Game.SHIELDOFFS*Cos(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), Game.SHIELDOFFS*Sin(I2R(index)/I2R(Game.SHIELD_COUNT)*bj_PI*2.), 270.)

			index++
		end

		// Create Outposts
		CreateUnit(Players.players[0], Game.OUTPOST_ID, TerrainData.OUTPOST2_X, TerrainData.OUTPOST2_Y, 270.)
		CreateUnit(Players.players[1], Game.OUTPOST_ID, TerrainData.OUTPOST1_X, TerrainData.OUTPOST1_Y, 270.)

		// Stop Time of Day
		SetTimeOfDayScale(0.)

		// Create Repair Ports
		Game.westRepair = CreateUnit(Players.players[0], Game.REPAIR_ID, TerrainData.WESTX, 1024., 270.)
		Game.eastRepair = CreateUnit(Players.players[1], Game.REPAIR_ID, TerrainData.EASTX, 1024., 270.)

		// Create Hangars
		Game.westHangar = CreateUnit(Players.players[0], Game.HANGAR_ID, TerrainData.WESTX-768., 0., 270.)
		Game.eastHangar = CreateUnit(Players.players[1], Game.HANGAR_ID, TerrainData.EASTX+768., 0., 270.)

		// Create Utility Ports
		Game.westUtility[0] = CreateUnit(Players.players[0], Game.UTILITY_ID,  TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[1] = CreateUnit(Players.players[0], Game.UTILITY2_ID, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[2] = CreateUnit(Players.players[0], Game.UTILITY3_ID, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.westUtility[3] = CreateUnit(Players.players[0], Game.UTILITY4_ID, TerrainData.WESTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[0] = CreateUnit(Players.players[1], Game.UTILITY_ID,  TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[1] = CreateUnit(Players.players[1], Game.UTILITY2_ID, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[2] = CreateUnit(Players.players[1], Game.UTILITY3_ID, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)
		Game.eastUtility[3] = CreateUnit(Players.players[1], Game.UTILITY4_ID, TerrainData.EASTX, TerrainData.UTILITY_Y, 270.)

		// Create Stone Spider (Trade Related)
		let s = CreateUnit(Players.playerPassive, Game.STONE_SPIDER_ID, TerrainData.STONE_SPIDER_X, TerrainData.STONE_SPIDER_Y, Game.STONE_SPIDER_FACING)
		s..addAbility('Aloc')..setTimeScale(0.)

		// Start game timer
		TimerStart(CreateTimer(), 1., true, function Game.second)

		// Do starting sound stuff
		Sounds.preload(Game.START_SOUND)
		TimerStart(CreateTimer(), Game.START_TIME, false, function Game.after)

		// Initial blackness
		Game.fadeOut(0.)
		DisplayTimedTextToPlayer(Players.localPlayer, 0., 0., 10., Game.WELCOME_MESSAGE)

		Sounds.preload(Game.WIN_SOUND)
		Sounds.preload(Game.DEF_SOUND)
		Sounds.preload(Game.TRADE_SUCCESS_SOUND)

		// colors
		Game.colors[0] = "|cffff0303"
		Game.colors[1] = "|cff0042ff"
		Game.colors[2] = "|cff1ce6b9"
		Game.colors[3] = "|cff540081"
		Game.colors[4] = "|cfffffc01"
		Game.colors[5] = "|cfffeba0e"
		Game.colors[6] = "|cff20c000"
		Game.colors[7] = "|cffe55bb0"
		Game.colors[8] = "|cff959697"
		Game.colors[9] = "|cff7ebff1"
		Game.colors[10] = "|cff106246"
		Game.colors[11] = "|cff4e2a04"
	end
scope SL15ShroudGenerator initializer i
	import DummyUnitStack
	import RegisterPlayerUnitEvent

	native UnitAlive takes unit u returns boolean

	struct Shroud
		unit caster
		real cX
		real cY
		unit dummy
		real time = 0.
		real genTime
	endstruct

	struct Gen
		unit dummy
		effect mdl
		real dX
		real dY
		real duration
	endstruct

	globals
		constant integer SHROUD_ID = 'A00Y'
		constant integer INVIS_ID  = 'A00L'
		constant integer BUF_ID    = 'B004'
		constant integer GEN_COUNT = 32
		constant real DURATION = 15.
		constant real GEN_PERIOD = 1./2.
		constant real CLOCK_PERIOD = 1./30.
		constant real SHROUD_RADIUS = 500.
		constant real GEN_VELOCITY = 400.
		constant string GEN_MODEL = "Abilities\\Weapons\\SpiritOfVengeanceMissile\\SpiritOfVengeanceMissile.mdl"
		Shroud array shrouds
		integer shroudsIndex = -1
		Gen array gens
		integer gensIndex = -1
		timer clock =  CreateTimer()
		timer clock2 = CreateTimer()
	endglobals

	function p2 takes nothing returns nothing
		integer index=0
		Gen g
		loop
			exitwhen index>gensIndex
			g = gens[index]
			g.duration = g.duration - CLOCK_PERIOD
			SetUnitX(g.dummy, GetUnitX(g.dummy)+g.dX)
			SetUnitY(g.dummy, GetUnitY(g.dummy)+g.dY)
			if g.duration <= 0. then
				DestroyEffect(g.mdl)
				DummyUnitStack.release(g.dummy)
				destroy g
				gens[index] = gens[gensIndex]
				gensIndex = gensIndex - 1
				index = index - 1
				if gensIndex == -1 then
					PauseTimer(clock2)
				end
			end
			index=index+1
		endloop
	end

	function p takes nothing returns nothing
		integer index = 0
		integer j
		Shroud s
		Gen g
		loop
			exitwhen index > shroudsIndex
			s = shrouds[index]
			s.time = s.time + CLOCK_PERIOD
			s.genTime = s.genTime + CLOCK_PERIOD
			if s.genTime > GEN_PERIOD then
				s.genTime = 0.
				j = 0
				loop
					exitwhen j >= GEN_COUNT
					g = new Gen
					g.dummy = DummyUnitStack.get()
					g.mdl = AddSpecialEffectTarget(GEN_MODEL, g.dummy, "origin")
					g.dX = GEN_VELOCITY * Cos(2.*bj_PI*I2R(j)/I2R(GEN_COUNT)) * CLOCK_PERIOD
					g.dY = GEN_VELOCITY * Sin(2.*bj_PI*I2R(j)/I2R(GEN_COUNT)) * CLOCK_PERIOD
					g.duration = SHROUD_RADIUS / GEN_VELOCITY
					SetUnitFlyHeight(g.dummy, 100., 0.)
					SetUnitX(g.dummy, s.cX)
					SetUnitY(g.dummy, s.cY)
					gensIndex = gensIndex + 1
					gens[gensIndex] = g
					if gensIndex == 0 then
						TimerStart(clock2, CLOCK_PERIOD, true, function p2)
					end
					j = j + 1
				endloop
			end
			if IsUnitInRangeXY(s.caster, s.cX, s.cY, SHROUD_RADIUS) then
				if GetUnitAbilityLevel(s.caster, BUF_ID)<1 then
					SetUnitX(s.dummy, GetUnitX(s.caster))
					SetUnitY(s.dummy, GetUnitY(s.caster))
					UnitAddAbility(s.dummy, INVIS_ID)
					IssueTargetOrder(s.dummy, "invisibility", s.caster)
					UnitRemoveAbility(s.dummy, INVIS_ID)
				end
			else
				UnitRemoveAbility(s.caster, BUF_ID)
			end
			if not UnitAlive(s.caster) or GetUnitTypeId(s.caster)==0 or s.time>DURATION then
				DummyUnitStack.release(s.dummy)
				destroy s
				shrouds[index] = shrouds[shroudsIndex]
				shroudsIndex = shroudsIndex - 1
				index = index - 1
				if shroudsIndex == -1 then
					PauseTimer(clock)
				end
			end
			index = index +1
		endloop
	end

	function c takes nothing returns nothing
		Shroud s
		if GetSpellAbilityId()==SHROUD_ID then
			s = new Shroud
			s.caster = GetTriggerUnit()
			s.cX = GetUnitX(s.caster)
			s.cY = GetUnitY(s.caster)
			s.dummy = DummyUnitStack.get()
			s.genTime = GEN_PERIOD
			SetUnitX(s.dummy, s.cX)
			SetUnitY(s.dummy, s.cY)
			shroudsIndex = shroudsIndex + 1
			shrouds[shroudsIndex] = s
			if shroudsIndex == 0 then
				TimerStart(clock, CLOCK_PERIOD, true, function p)
			end
		end
	end

	function i takes nothing returns nothing
		registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, function c)
	end
endscope

package EnchantingStone
	import ClosureForGroups
	import ClosureTimers
	import DummyUnitStack
	import Game
	import Players
	import TerrainData

	constant CLOCK_PERIOD         =   1. / 30.
	constant LOCK_HEIGHT          = 560.
	constant OWNR_HEIGHT          = 160.
	constant INDICATOR_SCALE      =    .5
	constant INDICATOR_TIME_SCALE =    .1
	constant CAPTURE_TIME         =  10.
	constant LOCK_TIME            =  60. * 3.
	constant CAPTURE_RADIUS       = 150. + 16.
	constant PROGRESS_OFFSET      = 75.

	constant CAPTURE_STATUS_CEIL = R2I(CAPTURE_TIME / CLOCK_PERIOD)
	constant LOCK_STEPS          = R2I(   LOCK_TIME / CLOCK_PERIOD)

	constant INDICATOR_MODEL = "units\\nightelf\\Wisp\\Wisp.mdl"

	int lockStepsNorth     = LOCK_STEPS
	int lockStepsSouth     = LOCK_STEPS
	int captureStatusNorth = R2I(CAPTURE_STATUS_CEIL / 2)
	int captureStatusSouth = R2I(CAPTURE_STATUS_CEIL / 2)
	int capPowerWest       = 0
	int capPowerEast       = 0

	bool lockedNorth = true
	bool lockedSouth = true

	public class EnchantingStone
		static player ownerNorth = null
		static player ownerSouth = null


	unit stoneNorth
	unit stoneSouth
	unit lockIndicatorNorth
	unit lockIndicatorSouth
	unit ownerIndicatorNorth
	unit ownerIndicatorSouth
	unit progressIndicatorSouth
	unit progressIndicatorNorth

	ForGroupCallback unlock_south_closure = (unit u) -> begin
		int id = u.getOwner().getId()

		if Players.isWest(id)
			capPowerWest++
		else if Players.isEast(id)
			capPowerEast++
	end

	ForGroupCallback unlock_north_closure = (unit u) -> begin
		int id = u.getOwner().getId()

		if Players.isWest(id)
			capPowerWest++
		else if Players.isEast(id)
			capPowerEast++
	end

	function onLockedNorth()
		lockStepsNorth--
		lockIndicatorNorth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsNorth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsNorth <= 0
			lockedNorth = false
			lockIndicatorNorth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)

	function onLockedSouth()
		lockStepsSouth--
		lockIndicatorSouth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsSouth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsSouth <= 0
			lockedSouth = false
			lockIndicatorSouth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)

	function onUnlockedNorth()
		// Get capturing power.
		capPowerWest = 0
		capPowerEast = 0
		int capPower = 0

		vec2 stone1 = vec2(TerrainData.STONE1_X, TerrainData.STONE1_Y)

		forUnitsInRange(stone1, CAPTURE_RADIUS, unlock_north_closure)

		if not (capPowerWest > 0 and capPowerEast > 0)
			capPower += capPowerWest
			capPower -= capPowerEast
			if capPowerWest > 0
				progressIndicatorNorth..setX(TerrainData.STONE1_X - PROGRESS_OFFSET)
					..setY(TerrainData.STONE1_Y)
					..setColor(PLAYER_COLOR_RED)
			else if capPowerEast > 0
				progressIndicatorNorth..setX(TerrainData.STONE1_X + PROGRESS_OFFSET)
					..setY(TerrainData.STONE1_Y)
					..setColor(PLAYER_COLOR_BLUE)

		if capPower == 0
			progressIndicatorNorth..setX(TerrainData.SAFE_X)
				..setY(TerrainData.SAFE_Y)


		captureStatusNorth += capPower
		captureStatusNorth = min(captureStatusNorth, CAPTURE_STATUS_CEIL)
		captureStatusNorth = max(captureStatusNorth, 0)

		if captureStatusNorth == CAPTURE_STATUS_CEIL and EnchantingStone.ownerNorth != Players.players[0]
			lockedNorth = true
			lockIndicatorNorth..setX(TerrainData.STONE1_X)..setY(TerrainData.STONE1_Y)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			EnchantingStone.ownerNorth = Players.players[0]
			ownerIndicatorNorth.setColor(PLAYER_COLOR_RED)
			progressIndicatorNorth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)
		else if captureStatusNorth == 0 and EnchantingStone.ownerNorth != Players.players[1]
			lockedNorth = true
			lockIndicatorNorth..setX(TerrainData.STONE1_X)..setY(TerrainData.STONE1_Y)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			EnchantingStone.ownerNorth = Players.players[1]
			ownerIndicatorSouth.setColor(PLAYER_COLOR_BLUE)
			progressIndicatorNorth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)

	function onUnlockedSouth()
		// Get capturing power.
		capPowerWest = 0
		capPowerEast = 0
		int capPower = 0

		vec2 stone2 = vec2(TerrainData.STONE2_X, TerrainData.STONE2_Y)

		forUnitsInRange(stone2, CAPTURE_RADIUS, unlock_south_closure)

		if not (capPowerWest > 0 and capPowerEast > 0)
			capPower += capPowerWest
			capPower -= capPowerEast
			if capPowerWest > 0
				progressIndicatorSouth..setX(TerrainData.STONE2_X - PROGRESS_OFFSET)
					..setY(TerrainData.STONE2_Y)
					..setColor(PLAYER_COLOR_RED)
			else if capPowerEast > 0
				progressIndicatorSouth..setX(TerrainData.STONE2_X + PROGRESS_OFFSET)
					..setY(TerrainData.STONE2_Y)
					..setColor(PLAYER_COLOR_BLUE)



		if capPower == 0
			progressIndicatorSouth..setX(TerrainData.SAFE_X)
				..setY(TerrainData.SAFE_Y)


		captureStatusSouth += capPower
		captureStatusSouth = min(captureStatusSouth, CAPTURE_STATUS_CEIL)
		captureStatusSouth = max(captureStatusSouth, 0)

		if captureStatusSouth == CAPTURE_STATUS_CEIL and EnchantingStone.ownerSouth != Players.players[0]
			lockedSouth = true
			lockIndicatorSouth..setX(TerrainData.STONE2_X)..setY(TerrainData.STONE2_Y)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			EnchantingStone.ownerSouth = Players.players[0]
			ownerIndicatorSouth.setColor(PLAYER_COLOR_RED)
			progressIndicatorSouth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)
		else if captureStatusSouth == 0 and EnchantingStone.ownerSouth != Players.players[1]
			lockedSouth = true
			lockIndicatorSouth..setX(TerrainData.STONE2_X)..setY(TerrainData.STONE2_Y)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			EnchantingStone.ownerSouth = Players.players[1]
			ownerIndicatorSouth.setColor(PLAYER_COLOR_BLUE)
			progressIndicatorSouth..setX(TerrainData.SAFE_X)..setY(TerrainData.SAFE_Y)



	init
		// Create Enchanting Stones.
		stoneNorth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.STONE1_X, TerrainData.STONE1_Y, 270.)
		stoneSouth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.STONE2_X, TerrainData.STONE2_Y, 270.)

		// Create indicator dummies.
		lockIndicatorNorth  = DummyUnitStack.get()
			..setX(TerrainData.STONE1_X)
			..setY(TerrainData.STONE1_Y)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		lockIndicatorSouth  = DummyUnitStack.get()
			..setX(TerrainData.STONE2_X)
			..setY(TerrainData.STONE2_Y)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorNorth = DummyUnitStack.get()
			..setX(TerrainData.STONE1_X)
			..setY(TerrainData.STONE1_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorSouth = DummyUnitStack.get()
			..setX(TerrainData.STONE2_X)
			..setY(TerrainData.STONE2_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		progressIndicatorNorth = DummyUnitStack.get()
			..setX(TerrainData.SAFE_X)
			..setY(TerrainData.SAFE_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		progressIndicatorSouth = DummyUnitStack.get()
			..setX(TerrainData.SAFE_X)
			..setY(TerrainData.SAFE_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)

		doPeriodically(CLOCK_PERIOD, (CallbackPeriodic _) -> begin
			if lockedNorth
				onLockedNorth()
			else
				onUnlockedNorth()


			if lockedSouth
				onLockedSouth()
			else
				onUnlockedSouth()

		end)

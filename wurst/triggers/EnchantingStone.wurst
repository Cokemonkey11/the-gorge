package EnchantingStone
	import ClosureTimers
	import DummyUnitStack
	import Game
	import Players
	import TerrainData
	import Units

	constant LOCK_HEIGHT          = 560.
	constant OWNR_HEIGHT          = 160.
	constant INDICATOR_SCALE      =    .5
	constant INDICATOR_TIME_SCALE =    .1
	constant CAPTURE_TIME         =  10.
	constant LOCK_TIME            =  60. * 2.
	constant CAPTURE_RADIUS       = 150. + 16. + 16.
	constant PROGRESS_OFFSET      = vec2(75., 0.)

	constant PERIOD = 1. / 10.

	constant CAPTURE_STATUS_CEIL = R2I(CAPTURE_TIME / PERIOD)
	constant LOCK_STEPS          = R2I(   LOCK_TIME / PERIOD)

	constant INDICATOR_MODEL = Units.wisp1

	var lockStepsNorth     = LOCK_STEPS
	var lockStepsSouth     = LOCK_STEPS
	var captureStatusNorth = R2I(CAPTURE_STATUS_CEIL / 2)
	var captureStatusSouth = R2I(CAPTURE_STATUS_CEIL / 2)
	var capPowerWest       = 0
	var capPowerEast       = 0

	var lockedNorth = true
	var lockedSouth = true

	function texttag.updateCapStatus(int status)
		this.setText((status / CAPTURE_STATUS_CEIL).toString(2), 11.)

	let northTt = CreateTextTag()
		..setPermanent(true)
		..setPos(TerrainData.POS_STONE1.withZ(50.))
		..updateCapStatus(captureStatusNorth)
		..setVisibility(true)
	let southTt = CreateTextTag()
		..setPermanent(true)
		..setPos(TerrainData.POS_STONE2.withZ(50.))
		..updateCapStatus(captureStatusSouth)
		..setVisibility(true)


	public class EnchantingStone
		static player ownerNorth = null
		static player ownerSouth = null


	constant stoneNorth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.POS_STONE1.x, TerrainData.POS_STONE1.y, 270.)
	constant stoneSouth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.POS_STONE2.x, TerrainData.POS_STONE2.y, 270.)
	unit lockIndicatorNorth
	unit lockIndicatorSouth
	unit ownerIndicatorNorth
	unit ownerIndicatorSouth
	unit progressIndicatorSouth
	unit progressIndicatorNorth


	function onLockedNorth()
		lockStepsNorth--
		lockIndicatorNorth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsNorth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsNorth <= 0
			lockedNorth = false
			lockIndicatorNorth.setPos(TerrainData.SAFE)


	function onLockedSouth()
		lockStepsSouth--
		lockIndicatorSouth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsSouth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsSouth <= 0
			lockedSouth = false
			lockIndicatorSouth.setPos(TerrainData.SAFE)


	let grp = CreateGroup()
	function onUnlockedNorth()
		// Get capturing power.
		capPowerWest = 0
		capPowerEast = 0
		int capPower = 0

		grp.enumUnitsInRange(TerrainData.POS_STONE1, CAPTURE_RADIUS, Condition(() -> begin
			let id = GetFilterUnit().getOwner().getId()

			if Players.isWest(id)
				capPowerWest++
			else if Players.isEast(id)
				capPowerEast++

			return false
		end))

		if not (capPowerWest > 0 and capPowerEast > 0)
			capPower += capPowerWest
			capPower -= capPowerEast
			if capPowerWest > 0
				progressIndicatorNorth..setPos(TerrainData.POS_STONE1 - PROGRESS_OFFSET)
					..setColor(PLAYER_COLOR_RED)
			else if capPowerEast > 0
				progressIndicatorNorth..setPos(TerrainData.POS_STONE1 + PROGRESS_OFFSET)
					..setColor(PLAYER_COLOR_BLUE)

		// Hide indicator in neutral state.
		if capPower == 0
			progressIndicatorNorth.setPos(TerrainData.SAFE)

		captureStatusNorth += capPower
		captureStatusNorth = min(captureStatusNorth, CAPTURE_STATUS_CEIL)
		captureStatusNorth = max(captureStatusNorth, 0)

		northTt.updateCapStatus(captureStatusNorth)

		if captureStatusNorth == CAPTURE_STATUS_CEIL and EnchantingStone.ownerNorth != players[0]
			lockedNorth = true
			lockIndicatorNorth..setPos(TerrainData.POS_STONE1)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			EnchantingStone.ownerNorth = players[0]
			ownerIndicatorNorth.setColor(PLAYER_COLOR_RED)
			progressIndicatorNorth.setPos(TerrainData.SAFE)
		else if captureStatusNorth == 0 and EnchantingStone.ownerNorth != players[1]
			lockedNorth = true
			lockIndicatorNorth..setPos(TerrainData.POS_STONE1)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			EnchantingStone.ownerNorth = players[1]
			ownerIndicatorNorth.setColor(PLAYER_COLOR_BLUE)
			progressIndicatorNorth.setPos(TerrainData.SAFE)


	function onUnlockedSouth()
		// Get capturing power.
		capPowerWest = 0
		capPowerEast = 0
		int capPower = 0

		grp.enumUnitsInRange(TerrainData.POS_STONE2, CAPTURE_RADIUS, Condition(() -> begin
			let id = GetFilterUnit().getOwner().getId()

			if Players.isWest(id)
				capPowerWest++
			else if Players.isEast(id)
				capPowerEast++

			return false
		end))

		if not (capPowerWest > 0 and capPowerEast > 0)
			capPower += capPowerWest
			capPower -= capPowerEast
			if capPowerWest > 0
				progressIndicatorSouth..setPos(TerrainData.POS_STONE2 - PROGRESS_OFFSET)
					..setColor(PLAYER_COLOR_RED)
			else if capPowerEast > 0
				progressIndicatorSouth..setPos(TerrainData.POS_STONE2 + PROGRESS_OFFSET)
					..setColor(PLAYER_COLOR_BLUE)

		if capPower == 0
			progressIndicatorSouth.setPos(TerrainData.SAFE)

		captureStatusSouth += capPower
		captureStatusSouth = min(captureStatusSouth, CAPTURE_STATUS_CEIL)
		captureStatusSouth = max(captureStatusSouth, 0)

		southTt.updateCapStatus(captureStatusSouth)

		if captureStatusSouth == CAPTURE_STATUS_CEIL and EnchantingStone.ownerSouth != players[0]
			lockedSouth = true
			lockIndicatorSouth..setPos(TerrainData.POS_STONE2)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			EnchantingStone.ownerSouth = players[0]
			ownerIndicatorSouth.setColor(PLAYER_COLOR_RED)
			progressIndicatorSouth.setPos(TerrainData.SAFE)
		else if captureStatusSouth == 0 and EnchantingStone.ownerSouth != players[1]
			lockedSouth = true
			lockIndicatorSouth..setPos(TerrainData.POS_STONE2)..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			EnchantingStone.ownerSouth = players[1]
			ownerIndicatorSouth.setColor(PLAYER_COLOR_BLUE)
			progressIndicatorSouth.setPos(TerrainData.SAFE)


	init
		// Create indicator dummies.
		lockIndicatorNorth  = DummyUnitStack.get()
			..setPos(TerrainData.POS_STONE1)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		lockIndicatorSouth  = DummyUnitStack.get()
			..setPos(TerrainData.POS_STONE2)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorNorth = DummyUnitStack.get()
			..setPos(TerrainData.POS_STONE1)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorSouth = DummyUnitStack.get()
			..setPos(TerrainData.POS_STONE2)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		progressIndicatorNorth = DummyUnitStack.get()
			..setPos(TerrainData.SAFE)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		progressIndicatorSouth = DummyUnitStack.get()
			..setPos(TerrainData.SAFE)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)

		doPeriodically(PERIOD, (CallbackPeriodic _) -> begin
			// profile()

			if lockedNorth
				onLockedNorth()
			else
				onUnlockedNorth()


			if lockedSouth
				onLockedSouth()
			else
				onUnlockedSouth()
		end)

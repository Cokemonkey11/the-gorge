package EnchantingStone
	import ClosureForGroups
	import ClosureTimers
	import DummyUnitStack
	import Game
	import Maths
	import Players
	import RegisterPlayerUnitEvent
	import TerrainData
	import Vectors

	constant real CLOCK_PERIOD         =   1. / 30.
	constant real LOCK_HEIGHT          = 560.
	constant real OWNR_HEIGHT          = 160.
	constant real INDICATOR_SCALE      =    .5
	constant real INDICATOR_TIME_SCALE =    .1
	constant real CAPTURE_TIME         =  10.
	constant real    LOCK_TIME         =  20. // 60. * 3.
	constant real CAPTURE_RADIUS       = 400.

	constant integer CAPTURE_STATUS_CEIL = R2I(CAPTURE_TIME / CLOCK_PERIOD)
	constant integer LOCK_STEPS          = R2I(60. * 3.     / CLOCK_PERIOD)

	constant string INDICATOR_MODEL = "units\\nightelf\\Wisp\\Wisp.mdl"

	integer lockStepsNorth     = LOCK_STEPS
	integer lockStepsSouth     = LOCK_STEPS
	integer captureStatusNorth = R2I(CAPTURE_STATUS_CEIL / 2)
	integer captureStatusSouth = R2I(CAPTURE_STATUS_CEIL / 2)

	boolean lockedNorth = true
	boolean lockedSouth = true

	player ownerNorth = null
	player ownerSouth = null

	unit stoneNorth
	unit stoneSouth
	unit lockIndicatorNorth
	unit lockIndicatorSouth
	unit ownerIndicatorNorth
	unit ownerIndicatorSouth

	function onLockedNorth()
		lockStepsNorth--
		lockIndicatorNorth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsNorth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsNorth <= 0
			lockedNorth = false
			lockIndicatorNorth.hide()
		end
	end

	function onLockedSouth()
		lockStepsSouth--
		lockIndicatorSouth.setFlyHeight(OWNR_HEIGHT + (LOCK_HEIGHT - OWNR_HEIGHT) * (I2R(lockStepsSouth) / I2R(LOCK_STEPS)), 0.)

		if lockStepsSouth <= 0
			lockedSouth = false
			lockIndicatorSouth.hide()
		end
	end

	function onUnlockedNorth()
		// Get capturing power.
		real capPowerWest = 0.
		real capPowerEast = 0.
		real capPower     = 0.

		// vec2 stone1 = ((TerrainData.STONE1_X), (TerrainData.STONE1_Y))
		vec2 stone1 = vec2(380.0, 1030.0)

		forUnitsInRange(stone1, CAPTURE_RADIUS, (unit u) -> begin
			int id = u.getPlayerId()

			if Players.isWest(id)
				capPowerWest++
			elseif Players.isEast(id)
				capPowerEast++
			end
		end)

		if not (capPowerWest > 0. and capPowerEast > 0.)
			capPower += capPowerWest
			capPower -= capPowerEast
		end

		captureStatusNorth += capPower
		captureStatusNorth = min(captureStatusNorth, CAPTURE_STATUS_CEIL)
		captureStatusNorth = max(captureStatusNorth, 0)

		if captureStatusNorth == CAPTURE_STATUS_CEIL and ownerNorth != Players.players[0]
			lockedNorth = true
			lockIndicatorNorth..show()..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			ownerNorth = Players.players[0]
		elseif captureStatusNorth == 0 and ownerNorth != Players.players[1]
			lockedNorth = true
			lockIndicatorNorth..show()..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsNorth = LOCK_STEPS
			ownerNorth = Players.players[1]
		end
	end

	function onUnlockedSouth()
		// Get capturing power.
		real capPowerWest = 0.
		real capPowerEast = 0.
		real capPower     = 0.

		// vec2 stone2 = ((TerrainData.STONE2_X), (TerrainData.STONE2_Y))
		vec2 stone2 = vec2(-140., -1020.)

		forUnitsInRange(stone2, CAPTURE_RADIUS, (unit u) -> begin
			integer id = u.getPlayerId()

			if Players.isWest(id)
				capPowerWest++
			elseif Players.isEast(id)
				capPowerEast++
			end
		end)

		if not (capPowerWest > 0. and capPowerEast > 0.)
			capPower += capPowerWest
			capPower -= capPowerEast
		end

		captureStatusSouth += capPower
		captureStatusSouth = min(captureStatusSouth, CAPTURE_STATUS_CEIL)
		captureStatusSouth = max(captureStatusSouth, 0)

		if captureStatusSouth == CAPTURE_STATUS_CEIL and ownerSouth != Players.players[0]
			lockedSouth = true
			lockIndicatorSouth..show()..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			ownerSouth = Players.players[0]
		elseif captureStatusSouth == 0 and ownerSouth != Players.players[1]
			lockedSouth = true
			lockIndicatorSouth..show()..setFlyHeight(LOCK_HEIGHT, 0.)
			lockStepsSouth = LOCK_STEPS
			ownerSouth = Players.players[1]
		end
	end

	init
		// Create Enchanting Stones.
		stoneNorth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.STONE1_X, TerrainData.STONE1_Y, 270.)
		stoneSouth = CreateUnit(Players.playerPassive, Game.STONE_ID, TerrainData.STONE2_X, TerrainData.STONE2_Y, 270.)

		// Create indicator dummies.
		lockIndicatorNorth  = DummyUnitStack.get()
			..setX(TerrainData.STONE1_X)
			..setY(TerrainData.STONE1_Y)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		lockIndicatorSouth  = DummyUnitStack.get()
			..setX(TerrainData.STONE2_X)
			..setY(TerrainData.STONE2_Y)
			..setFlyHeight(LOCK_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_GREEN)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorNorth = DummyUnitStack.get()
			..setX(TerrainData.STONE1_X)
			..setY(TerrainData.STONE1_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)
		ownerIndicatorSouth = DummyUnitStack.get()
			..setX(TerrainData.STONE2_X)
			..setY(TerrainData.STONE2_Y)
			..setFlyHeight(OWNR_HEIGHT, 0.)
			..addEffect(INDICATOR_MODEL, "origin")
			..setOwner(Players.playerPassive, false)
			..setColor(PLAYER_COLOR_LIGHT_GRAY)
			..setScale(INDICATOR_SCALE)
			..setTimeScale(INDICATOR_TIME_SCALE)

		doPeriodically(CLOCK_PERIOD, (CallbackPeriodic cb) -> begin
			if lockedNorth
				onLockedNorth()
			else
				onUnlockedNorth()
			end

			if lockedSouth
				onLockedSouth()
			else
				onUnlokedSouth()
			end
		end)
	end
